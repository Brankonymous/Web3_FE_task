{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAccessList = exports.getFeeHistory = exports.getProof = exports.getChainId = exports.getLogs = exports.estimateGas = exports.call = exports.signTransaction = exports.sign = exports.sendSignedTransaction = exports.sendTransaction = exports.getTransactionCount = exports.getTransactionReceipt = exports.getTransactionFromBlock = exports.getPendingTransactions = exports.getTransaction = exports.getUncle = exports.getBlockUncleCount = exports.getBlockTransactionCount = exports.getBlock = exports.getCode = exports.getStorageAt = exports.getBalance = exports.getBlockNumber = exports.getGasPrice = exports.getHashRate = exports.isMining = exports.getCoinbase = exports.isSyncing = exports.getProtocolVersion = void 0;\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nconst web3_types_1 = require(\"web3-types\");\nconst web3_core_1 = require(\"web3-core\");\nconst web3_utils_1 = require(\"web3-utils\");\nconst web3_eth_accounts_1 = require(\"web3-eth-accounts\");\nconst web3_validator_1 = require(\"web3-validator\");\nconst web3_errors_1 = require(\"web3-errors\");\nconst web3_rpc_methods_1 = require(\"web3-rpc-methods\");\nconst decode_signed_transaction_js_1 = require(\"./utils/decode_signed_transaction.js\");\nconst schemas_js_1 = require(\"./schemas.js\");\n// eslint-disable-next-line import/no-cycle\nconst transaction_builder_js_1 = require(\"./utils/transaction_builder.js\");\nconst format_transaction_js_1 = require(\"./utils/format_transaction.js\");\n// eslint-disable-next-line import/no-cycle\nconst get_transaction_gas_pricing_js_1 = require(\"./utils/get_transaction_gas_pricing.js\");\n// eslint-disable-next-line import/no-cycle\nconst try_send_transaction_js_1 = require(\"./utils/try_send_transaction.js\");\n// eslint-disable-next-line import/no-cycle\nconst wait_for_transaction_receipt_js_1 = require(\"./utils/wait_for_transaction_receipt.js\");\nconst watch_transaction_for_confirmations_js_1 = require(\"./utils/watch_transaction_for_confirmations.js\");\nconst constants_js_1 = require(\"./constants.js\");\n// eslint-disable-next-line import/no-cycle\nconst get_transaction_error_js_1 = require(\"./utils/get_transaction_error.js\");\n// eslint-disable-next-line import/no-cycle\nconst get_revert_reason_js_1 = require(\"./utils/get_revert_reason.js\");\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nconst getProtocolVersion = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return web3_rpc_methods_1.ethRpcMethods.getProtocolVersion(web3Context.requestManager);\n});\nexports.getProtocolVersion = getProtocolVersion;\n// TODO Add returnFormat parameter\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nconst isSyncing = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return web3_rpc_methods_1.ethRpcMethods.getSyncing(web3Context.requestManager);\n});\nexports.isSyncing = isSyncing;\n// TODO consider adding returnFormat parameter (to format address as bytes)\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nconst getCoinbase = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return web3_rpc_methods_1.ethRpcMethods.getCoinbase(web3Context.requestManager);\n});\nexports.getCoinbase = getCoinbase;\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nconst isMining = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return web3_rpc_methods_1.ethRpcMethods.getMining(web3Context.requestManager);\n});\nexports.isMining = isMining;\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getHashRate(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getHashRate(web3Context.requestManager);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\nexports.getHashRate = getHashRate;\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getGasPrice(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getGasPrice(web3Context.requestManager);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\nexports.getGasPrice = getGasPrice;\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getBlockNumber(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getBlockNumber(web3Context.requestManager);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\nexports.getBlockNumber = getBlockNumber;\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getBalance(web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getBalance(web3Context.requestManager, address, blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\nexports.getBalance = getBalance;\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getStorageAt(web3Context, address, storageSlot, blockNumber = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const storageSlotFormatted = (0, web3_utils_1.format)({\n      format: 'uint'\n    }, storageSlot, web3_types_1.ETH_DATA_FORMAT);\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getStorageAt(web3Context.requestManager, address, storageSlotFormatted, blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\nexports.getStorageAt = getStorageAt;\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getCode(web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getCode(web3Context.requestManager, address, blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\nexports.getCode = getCode;\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getBlock(web3Context, block = web3Context.defaultBlock, hydrated = false, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n    if ((0, web3_validator_1.isBytes)(block)) {\n      const blockHashFormatted = (0, web3_utils_1.format)({\n        format: 'bytes32'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getBlockByHash(web3Context.requestManager, blockHashFormatted, hydrated);\n    } else {\n      const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block) ? block : (0, web3_utils_1.format)({\n        format: 'uint'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getBlockByNumber(web3Context.requestManager, blockNumberFormatted, hydrated);\n    }\n    return (0, web3_utils_1.format)(schemas_js_1.blockSchema, response, returnFormat);\n  });\n}\nexports.getBlock = getBlock;\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getBlockTransactionCount(web3Context, block = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n    if ((0, web3_validator_1.isBytes)(block)) {\n      const blockHashFormatted = (0, web3_utils_1.format)({\n        format: 'bytes32'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getBlockTransactionCountByHash(web3Context.requestManager, blockHashFormatted);\n    } else {\n      const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block) ? block : (0, web3_utils_1.format)({\n        format: 'uint'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getBlockTransactionCountByNumber(web3Context.requestManager, blockNumberFormatted);\n    }\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\nexports.getBlockTransactionCount = getBlockTransactionCount;\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getBlockUncleCount(web3Context, block = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n    if ((0, web3_validator_1.isBytes)(block)) {\n      const blockHashFormatted = (0, web3_utils_1.format)({\n        format: 'bytes32'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getUncleCountByBlockHash(web3Context.requestManager, blockHashFormatted);\n    } else {\n      const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block) ? block : (0, web3_utils_1.format)({\n        format: 'uint'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getUncleCountByBlockNumber(web3Context.requestManager, blockNumberFormatted);\n    }\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\nexports.getBlockUncleCount = getBlockUncleCount;\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getUncle(web3Context, block = web3Context.defaultBlock, uncleIndex, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const uncleIndexFormatted = (0, web3_utils_1.format)({\n      format: 'uint'\n    }, uncleIndex, web3_types_1.ETH_DATA_FORMAT);\n    let response;\n    if ((0, web3_validator_1.isBytes)(block)) {\n      const blockHashFormatted = (0, web3_utils_1.format)({\n        format: 'bytes32'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getUncleByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, uncleIndexFormatted);\n    } else {\n      const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block) ? block : (0, web3_utils_1.format)({\n        format: 'uint'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getUncleByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, uncleIndexFormatted);\n    }\n    return (0, web3_utils_1.format)(schemas_js_1.blockSchema, response, returnFormat);\n  });\n}\nexports.getUncle = getUncle;\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getTransaction(web3Context, transactionHash, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionHashFormatted = (0, web3_utils_1.format)({\n      format: 'bytes32'\n    }, transactionHash, web3_types_1.DEFAULT_RETURN_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionByHash(web3Context.requestManager, transactionHashFormatted);\n    return (0, web3_validator_1.isNullish)(response) ? response : (0, format_transaction_js_1.formatTransaction)(response, returnFormat, {\n      transactionSchema: schemas_js_1.transactionInfoSchema\n    });\n  });\n}\nexports.getTransaction = getTransaction;\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getPendingTransactions(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n    return response.map(transaction => (0, format_transaction_js_1.formatTransaction)(transaction, returnFormat));\n  });\n}\nexports.getPendingTransactions = getPendingTransactions;\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getTransactionFromBlock(web3Context, block = web3Context.defaultBlock, transactionIndex, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionIndexFormatted = (0, web3_utils_1.format)({\n      format: 'uint'\n    }, transactionIndex, web3_types_1.ETH_DATA_FORMAT);\n    let response;\n    if ((0, web3_validator_1.isBytes)(block)) {\n      const blockHashFormatted = (0, web3_utils_1.format)({\n        format: 'bytes32'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, transactionIndexFormatted);\n    } else {\n      const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block) ? block : (0, web3_utils_1.format)({\n        format: 'uint'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, transactionIndexFormatted);\n    }\n    return (0, web3_validator_1.isNullish)(response) ? response : (0, format_transaction_js_1.formatTransaction)(response, returnFormat, {\n      transactionSchema: schemas_js_1.transactionInfoSchema\n    });\n  });\n}\nexports.getTransactionFromBlock = getTransactionFromBlock;\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getTransactionReceipt(web3Context, transactionHash, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionHashFormatted = (0, web3_utils_1.format)({\n      format: 'bytes32'\n    }, transactionHash, web3_types_1.DEFAULT_RETURN_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionReceipt(web3Context.requestManager, transactionHashFormatted);\n    return (0, web3_validator_1.isNullish)(response) ? response : (0, web3_utils_1.format)(schemas_js_1.transactionReceiptSchema, response, returnFormat);\n  });\n}\nexports.getTransactionReceipt = getTransactionReceipt;\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getTransactionCount(web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionCount(web3Context.requestManager, address, blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\nexports.getTransactionCount = getTransactionCount;\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction sendTransaction(web3Context, transaction, returnFormat, options = {\n  checkRevertBeforeSending: true\n}) {\n  const promiEvent = new web3_core_1.Web3PromiEvent((resolve, reject) => {\n    setImmediate(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        let transactionFormatted = (0, format_transaction_js_1.formatTransaction)(Object.assign(Object.assign({}, transaction), {\n          from: (0, transaction_builder_js_1.getTransactionFromOrToAttr)('from', web3Context, transaction),\n          to: (0, transaction_builder_js_1.getTransactionFromOrToAttr)('to', web3Context, transaction)\n        }), web3_types_1.ETH_DATA_FORMAT);\n        if (!(options === null || options === void 0 ? void 0 : options.ignoreGasPricing) && (0, web3_validator_1.isNullish)(transactionFormatted.gasPrice) && ((0, web3_validator_1.isNullish)(transaction.maxPriorityFeePerGas) || (0, web3_validator_1.isNullish)(transaction.maxFeePerGas))) {\n          transactionFormatted = Object.assign(Object.assign({}, transactionFormatted), yield (0, get_transaction_gas_pricing_js_1.getTransactionGasPricing)(transactionFormatted, web3Context, web3_types_1.ETH_DATA_FORMAT));\n        }\n        try {\n          if (options.checkRevertBeforeSending !== false) {\n            const reason = yield (0, get_revert_reason_js_1.getRevertReason)(web3Context, transactionFormatted, options.contractAbi);\n            if (reason !== undefined) {\n              const error = yield (0, get_transaction_error_js_1.getTransactionError)(web3Context, transactionFormatted, undefined, undefined, options.contractAbi, reason);\n              if (promiEvent.listenerCount('error') > 0) {\n                promiEvent.emit('error', error);\n              }\n              reject(error);\n              return;\n            }\n          }\n          if (promiEvent.listenerCount('sending') > 0) {\n            promiEvent.emit('sending', transactionFormatted);\n          }\n          let transactionHash;\n          let wallet;\n          if (web3Context.wallet && !(0, web3_validator_1.isNullish)(transactionFormatted.from)) {\n            wallet = web3Context.wallet.get(transactionFormatted.from);\n          }\n          if (wallet) {\n            const signedTransaction = yield wallet.signTransaction(transactionFormatted);\n            transactionHash = yield (0, try_send_transaction_js_1.trySendTransaction)(web3Context, () => __awaiter(this, void 0, void 0, function* () {\n              return web3_rpc_methods_1.ethRpcMethods.sendRawTransaction(web3Context.requestManager, signedTransaction.rawTransaction);\n            }), signedTransaction.transactionHash);\n          } else {\n            transactionHash = yield (0, try_send_transaction_js_1.trySendTransaction)(web3Context, () => __awaiter(this, void 0, void 0, function* () {\n              return web3_rpc_methods_1.ethRpcMethods.sendTransaction(web3Context.requestManager, transactionFormatted);\n            }));\n          }\n          const transactionHashFormatted = (0, web3_utils_1.format)({\n            format: 'bytes32'\n          }, transactionHash, returnFormat);\n          if (promiEvent.listenerCount('sent') > 0) {\n            promiEvent.emit('sent', transactionFormatted);\n          }\n          if (promiEvent.listenerCount('transactionHash') > 0) {\n            promiEvent.emit('transactionHash', transactionHashFormatted);\n          }\n          const transactionReceipt = yield (0, wait_for_transaction_receipt_js_1.waitForTransactionReceipt)(web3Context, transactionHash, returnFormat);\n          const transactionReceiptFormatted = (0, web3_utils_1.format)(schemas_js_1.transactionReceiptSchema, transactionReceipt, returnFormat);\n          if (promiEvent.listenerCount('receipt') > 0) {\n            promiEvent.emit('receipt', transactionReceiptFormatted);\n          }\n          if (options === null || options === void 0 ? void 0 : options.transactionResolver) {\n            resolve(options === null || options === void 0 ? void 0 : options.transactionResolver(transactionReceiptFormatted));\n          } else if (transactionReceipt.status === BigInt(0)) {\n            const error = yield (0, get_transaction_error_js_1.getTransactionError)(web3Context, transactionFormatted, transactionReceiptFormatted, undefined, options === null || options === void 0 ? void 0 : options.contractAbi);\n            if (promiEvent.listenerCount('error') > 0) {\n              promiEvent.emit('error', error);\n            }\n            reject(error);\n          } else {\n            resolve(transactionReceiptFormatted);\n          }\n          if (promiEvent.listenerCount('confirmation') > 0) {\n            (0, watch_transaction_for_confirmations_js_1.watchTransactionForConfirmations)(web3Context, promiEvent, transactionReceiptFormatted, transactionHash, returnFormat);\n          }\n        } catch (error) {\n          let _error = error;\n          if (_error instanceof web3_errors_1.ContractExecutionError && web3Context.handleRevert) {\n            _error = yield (0, get_transaction_error_js_1.getTransactionError)(web3Context, transactionFormatted, undefined, undefined, options === null || options === void 0 ? void 0 : options.contractAbi);\n          }\n          if ((_error instanceof web3_errors_1.InvalidResponseError || _error instanceof web3_errors_1.ContractExecutionError || _error instanceof web3_errors_1.TransactionRevertWithCustomError || _error instanceof web3_errors_1.TransactionRevertedWithoutReasonError || _error instanceof web3_errors_1.TransactionRevertInstructionError) && promiEvent.listenerCount('error') > 0) {\n            promiEvent.emit('error', _error);\n          }\n          reject(_error);\n        }\n      }))();\n    });\n  });\n  return promiEvent;\n}\nexports.sendTransaction = sendTransaction;\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction sendSignedTransaction(web3Context, signedTransaction, returnFormat, options = {\n  checkRevertBeforeSending: true\n}) {\n  // TODO - Promise returned in function argument where a void return was expected\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  const promiEvent = new web3_core_1.Web3PromiEvent((resolve, reject) => {\n    setImmediate(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        // Formatting signedTransaction to be send to RPC endpoint\n        const signedTransactionFormattedHex = (0, web3_utils_1.format)({\n          format: 'bytes'\n        }, signedTransaction, web3_types_1.ETH_DATA_FORMAT);\n        const unSerializedTransaction = web3_eth_accounts_1.TransactionFactory.fromSerializedData((0, web3_utils_1.bytesToUint8Array)((0, web3_utils_1.hexToBytes)(signedTransactionFormattedHex)));\n        const unSerializedTransactionWithFrom = Object.assign(Object.assign({}, unSerializedTransaction.toJSON()), {\n          // Some providers will default `from` to address(0) causing the error\n          // reported from `eth_call` to not be the reason the user's tx failed\n          // e.g. `eth_call` will return an Out of Gas error for a failed\n          // smart contract execution contract, because the sender, address(0),\n          // has no balance to pay for the gas of the transaction execution\n          from: unSerializedTransaction.getSenderAddress().toString()\n        });\n        try {\n          if (options.checkRevertBeforeSending !== false) {\n            const reason = yield (0, get_revert_reason_js_1.getRevertReason)(web3Context, unSerializedTransactionWithFrom, options.contractAbi);\n            if (reason !== undefined) {\n              const error = yield (0, get_transaction_error_js_1.getTransactionError)(web3Context, unSerializedTransactionWithFrom, undefined, undefined, options.contractAbi, reason);\n              if (promiEvent.listenerCount('error') > 0) {\n                promiEvent.emit('error', error);\n              }\n              reject(error);\n              return;\n            }\n          }\n          if (promiEvent.listenerCount('sending') > 0) {\n            promiEvent.emit('sending', signedTransactionFormattedHex);\n          }\n          const transactionHash = yield (0, try_send_transaction_js_1.trySendTransaction)(web3Context, () => __awaiter(this, void 0, void 0, function* () {\n            return web3_rpc_methods_1.ethRpcMethods.sendRawTransaction(web3Context.requestManager, signedTransactionFormattedHex);\n          }));\n          if (promiEvent.listenerCount('sent') > 0) {\n            promiEvent.emit('sent', signedTransactionFormattedHex);\n          }\n          const transactionHashFormatted = (0, web3_utils_1.format)({\n            format: 'bytes32'\n          }, transactionHash, returnFormat);\n          if (promiEvent.listenerCount('transactionHash') > 0) {\n            promiEvent.emit('transactionHash', transactionHashFormatted);\n          }\n          const transactionReceipt = yield (0, wait_for_transaction_receipt_js_1.waitForTransactionReceipt)(web3Context, transactionHash, returnFormat);\n          const transactionReceiptFormatted = (0, web3_utils_1.format)(schemas_js_1.transactionReceiptSchema, transactionReceipt, returnFormat);\n          if (promiEvent.listenerCount('receipt') > 0) {\n            promiEvent.emit('receipt', transactionReceiptFormatted);\n          }\n          if (options === null || options === void 0 ? void 0 : options.transactionResolver) {\n            resolve(options === null || options === void 0 ? void 0 : options.transactionResolver(transactionReceiptFormatted));\n          } else if (transactionReceipt.status === BigInt(0)) {\n            const error = yield (0, get_transaction_error_js_1.getTransactionError)(web3Context, unSerializedTransactionWithFrom, transactionReceiptFormatted, undefined, options === null || options === void 0 ? void 0 : options.contractAbi);\n            if (promiEvent.listenerCount('error') > 0) {\n              promiEvent.emit('error', error);\n            }\n            reject(error);\n          } else {\n            resolve(transactionReceiptFormatted);\n          }\n          if (promiEvent.listenerCount('confirmation') > 0) {\n            (0, watch_transaction_for_confirmations_js_1.watchTransactionForConfirmations)(web3Context, promiEvent, transactionReceiptFormatted, transactionHash, returnFormat);\n          }\n        } catch (error) {\n          let _error = error;\n          if (_error instanceof web3_errors_1.ContractExecutionError && web3Context.handleRevert) {\n            _error = yield (0, get_transaction_error_js_1.getTransactionError)(web3Context, unSerializedTransactionWithFrom, undefined, undefined, options === null || options === void 0 ? void 0 : options.contractAbi);\n          }\n          if ((_error instanceof web3_errors_1.InvalidResponseError || _error instanceof web3_errors_1.ContractExecutionError || _error instanceof web3_errors_1.TransactionRevertWithCustomError || _error instanceof web3_errors_1.TransactionRevertedWithoutReasonError || _error instanceof web3_errors_1.TransactionRevertInstructionError) && promiEvent.listenerCount('error') > 0) {\n            promiEvent.emit('error', _error);\n          }\n          reject(_error);\n        }\n      }))();\n    });\n  });\n  return promiEvent;\n}\nexports.sendSignedTransaction = sendSignedTransaction;\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction sign(web3Context, message, addressOrIndex, returnFormat) {\n  var _a;\n  return __awaiter(this, void 0, void 0, function* () {\n    const messageFormatted = (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, message, web3_types_1.DEFAULT_RETURN_FORMAT);\n    if ((_a = web3Context.wallet) === null || _a === void 0 ? void 0 : _a.get(addressOrIndex)) {\n      const wallet = web3Context.wallet.get(addressOrIndex);\n      const signed = wallet.sign(messageFormatted);\n      return (0, web3_utils_1.format)(schemas_js_1.SignatureObjectSchema, signed, returnFormat);\n    }\n    if (typeof addressOrIndex === 'number') {\n      throw new web3_errors_1.SignatureError(message, 'RPC method \"eth_sign\" does not support index signatures');\n    }\n    const response = yield web3_rpc_methods_1.ethRpcMethods.sign(web3Context.requestManager, addressOrIndex, messageFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\nexports.sign = sign;\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction signTransaction(web3Context, transaction, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.signTransaction(web3Context.requestManager, (0, format_transaction_js_1.formatTransaction)(transaction, web3_types_1.ETH_DATA_FORMAT));\n    // Some clients only return the encoded signed transaction (e.g. Ganache)\n    // while clients such as Geth return the desired SignedTransactionInfoAPI object\n    return (0, web3_validator_1.isString)(response) ? (0, decode_signed_transaction_js_1.decodeSignedTransaction)(response, returnFormat) : {\n      raw: (0, web3_utils_1.format)({\n        format: 'bytes'\n      }, response.raw, returnFormat),\n      tx: (0, format_transaction_js_1.formatTransaction)(response.tx, returnFormat)\n    };\n  });\n}\nexports.signTransaction = signTransaction;\n// TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction call(web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.call(web3Context.requestManager, (0, format_transaction_js_1.formatTransaction)(transaction, web3_types_1.ETH_DATA_FORMAT), blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\nexports.call = call;\n// TODO - Investigate whether response is padded as 1.x docs suggest\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction estimateGas(web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionFormatted = (0, format_transaction_js_1.formatTransaction)(transaction, web3_types_1.ETH_DATA_FORMAT);\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.estimateGas(web3Context.requestManager, transactionFormatted, blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\nexports.estimateGas = estimateGas;\n// TODO - Add input formatting to filter\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getLogs(web3Context, filter, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // format type bigint or number toBlock and fromBlock to hexstring.\n    let {\n      toBlock,\n      fromBlock\n    } = filter;\n    if (!(0, web3_validator_1.isNullish)(toBlock)) {\n      if (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n        toBlock = (0, web3_utils_1.numberToHex)(toBlock);\n      }\n    }\n    if (!(0, web3_validator_1.isNullish)(fromBlock)) {\n      if (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n        fromBlock = (0, web3_utils_1.numberToHex)(fromBlock);\n      }\n    }\n    const formattedFilter = Object.assign(Object.assign({}, filter), {\n      fromBlock,\n      toBlock\n    });\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getLogs(web3Context.requestManager, formattedFilter);\n    const result = response.map(res => {\n      if (typeof res === 'string') {\n        return res;\n      }\n      return (0, web3_utils_1.format)(schemas_js_1.logSchema, res, returnFormat);\n    });\n    return result;\n  });\n}\nexports.getLogs = getLogs;\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getChainId(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getChainId(web3Context.requestManager);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    },\n    // Response is number in hex formatted string\n    response, returnFormat);\n  });\n}\nexports.getChainId = getChainId;\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getProof(web3Context, address, storageKeys, blockNumber = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const storageKeysFormatted = storageKeys.map(storageKey => (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, storageKey, web3_types_1.ETH_DATA_FORMAT));\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getProof(web3Context.requestManager, address, storageKeysFormatted, blockNumberFormatted);\n    return (0, web3_utils_1.format)(schemas_js_1.accountSchema, response, returnFormat);\n  });\n}\nexports.getProof = getProof;\n// TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getFeeHistory(web3Context, blockCount, newestBlock = web3Context.defaultBlock, rewardPercentiles, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockCountFormatted = (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockCount, web3_types_1.ETH_DATA_FORMAT);\n    const newestBlockFormatted = (0, web3_validator_1.isBlockTag)(newestBlock) ? newestBlock : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, newestBlock, web3_types_1.ETH_DATA_FORMAT);\n    const rewardPercentilesFormatted = (0, web3_utils_1.format)({\n      type: 'array',\n      items: {\n        format: 'uint'\n      }\n    }, rewardPercentiles, constants_js_1.NUMBER_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getFeeHistory(web3Context.requestManager, blockCountFormatted, newestBlockFormatted, rewardPercentilesFormatted);\n    return (0, web3_utils_1.format)(schemas_js_1.feeHistorySchema, response, returnFormat);\n  });\n}\nexports.getFeeHistory = getFeeHistory;\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction createAccessList(web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.createAccessList(web3Context.requestManager, (0, format_transaction_js_1.formatTransaction)(transaction, web3_types_1.ETH_DATA_FORMAT), blockNumberFormatted);\n    return (0, web3_utils_1.format)(schemas_js_1.accessListResultSchema, response, returnFormat);\n  });\n}\nexports.createAccessList = createAccessList;","map":{"version":3,"names":["web3_types_1","require","web3_core_1","web3_utils_1","web3_eth_accounts_1","web3_validator_1","web3_errors_1","web3_rpc_methods_1","decode_signed_transaction_js_1","schemas_js_1","transaction_builder_js_1","format_transaction_js_1","get_transaction_gas_pricing_js_1","try_send_transaction_js_1","wait_for_transaction_receipt_js_1","watch_transaction_for_confirmations_js_1","constants_js_1","get_transaction_error_js_1","get_revert_reason_js_1","getProtocolVersion","web3Context","__awaiter","ethRpcMethods","requestManager","exports","isSyncing","getSyncing","getCoinbase","isMining","getMining","getHashRate","returnFormat","response","format","getGasPrice","getBlockNumber","getBalance","address","blockNumber","defaultBlock","blockNumberFormatted","isBlockTag","ETH_DATA_FORMAT","getStorageAt","storageSlot","storageSlotFormatted","getCode","getBlock","block","hydrated","isBytes","blockHashFormatted","getBlockByHash","getBlockByNumber","blockSchema","getBlockTransactionCount","getBlockTransactionCountByHash","getBlockTransactionCountByNumber","getBlockUncleCount","getUncleCountByBlockHash","getUncleCountByBlockNumber","getUncle","uncleIndex","uncleIndexFormatted","getUncleByBlockHashAndIndex","getUncleByBlockNumberAndIndex","getTransaction","transactionHash","transactionHashFormatted","DEFAULT_RETURN_FORMAT","getTransactionByHash","isNullish","formatTransaction","transactionSchema","transactionInfoSchema","getPendingTransactions","map","transaction","getTransactionFromBlock","transactionIndex","transactionIndexFormatted","getTransactionByBlockHashAndIndex","getTransactionByBlockNumberAndIndex","getTransactionReceipt","transactionReceiptSchema","getTransactionCount","sendTransaction","options","checkRevertBeforeSending","promiEvent","Web3PromiEvent","resolve","reject","setImmediate","transactionFormatted","Object","assign","from","getTransactionFromOrToAttr","to","ignoreGasPricing","gasPrice","maxPriorityFeePerGas","maxFeePerGas","getTransactionGasPricing","reason","getRevertReason","contractAbi","undefined","error","getTransactionError","listenerCount","emit","wallet","get","signedTransaction","signTransaction","trySendTransaction","sendRawTransaction","rawTransaction","transactionReceipt","waitForTransactionReceipt","transactionReceiptFormatted","transactionResolver","status","BigInt","watchTransactionForConfirmations","_error","ContractExecutionError","handleRevert","InvalidResponseError","TransactionRevertWithCustomError","TransactionRevertedWithoutReasonError","TransactionRevertInstructionError","sendSignedTransaction","signedTransactionFormattedHex","unSerializedTransaction","TransactionFactory","fromSerializedData","bytesToUint8Array","hexToBytes","unSerializedTransactionWithFrom","toJSON","getSenderAddress","toString","sign","message","addressOrIndex","messageFormatted","_a","signed","SignatureObjectSchema","SignatureError","isString","decodeSignedTransaction","raw","tx","call","estimateGas","getLogs","filter","toBlock","fromBlock","numberToHex","formattedFilter","result","res","logSchema","getChainId","getProof","storageKeys","storageKeysFormatted","storageKey","accountSchema","getFeeHistory","blockCount","newestBlock","rewardPercentiles","blockCountFormatted","newestBlockFormatted","rewardPercentilesFormatted","type","items","NUMBER_DATA_FORMAT","feeHistorySchema","createAccessList","accessListResultSchema"],"sources":["/Users/branko/Documents/Web3_FE_task/node_modules/web3-eth/src/rpc_method_wrappers.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nimport {\n\tETH_DATA_FORMAT,\n\tFormatType,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tEthExecutionAPI,\n\tTransactionWithSenderAPI,\n\tSignedTransactionInfoAPI,\n\tWeb3BaseWalletAccount,\n\tAddress,\n\tBlockTag,\n\tBlockNumberOrTag,\n\tBytes,\n\tFilter,\n\tHexString,\n\tNumbers,\n\tHexStringBytes,\n\tAccountObject,\n\tBlock,\n\tFeeHistory,\n\tLog,\n\tTransactionReceipt,\n\tTransaction,\n\tTransactionCall,\n\tWeb3EthExecutionAPI,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tTransactionForAccessList,\n\tAccessListResult,\n} from 'web3-types';\nimport { Web3Context, Web3PromiEvent } from 'web3-core';\nimport { format, hexToBytes, bytesToUint8Array, numberToHex } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { isBlockTag, isBytes, isNullish, isString } from 'web3-validator';\nimport {\n\tContractExecutionError,\n\tInvalidResponseError,\n\tSignatureError,\n\tTransactionRevertedWithoutReasonError,\n\tTransactionRevertInstructionError,\n\tTransactionRevertWithCustomError,\n} from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport { decodeSignedTransaction } from './utils/decode_signed_transaction.js';\nimport {\n\taccountSchema,\n\tblockSchema,\n\tfeeHistorySchema,\n\tlogSchema,\n\ttransactionReceiptSchema,\n\ttransactionInfoSchema,\n\taccessListResultSchema,\n\tSignatureObjectSchema,\n} from './schemas.js';\nimport {\n\tSendSignedTransactionEvents,\n\tSendSignedTransactionOptions,\n\tSendTransactionEvents,\n\tSendTransactionOptions,\n} from './types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionFromOrToAttr } from './utils/transaction_builder.js';\nimport { formatTransaction } from './utils/format_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionGasPricing } from './utils/get_transaction_gas_pricing.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './utils/try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { waitForTransactionReceipt } from './utils/wait_for_transaction_receipt.js';\nimport { watchTransactionForConfirmations } from './utils/watch_transaction_for_confirmations.js';\nimport { NUMBER_DATA_FORMAT } from './constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionError } from './utils/get_transaction_error.js';\n// eslint-disable-next-line import/no-cycle\nimport { getRevertReason } from './utils/get_revert_reason.js';\n\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getProtocolVersion = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getProtocolVersion(web3Context.requestManager);\n\n// TODO Add returnFormat parameter\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isSyncing = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getSyncing(web3Context.requestManager);\n\n// TODO consider adding returnFormat parameter (to format address as bytes)\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getCoinbase = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getCoinbase(web3Context.requestManager);\n\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isMining = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getMining(web3Context.requestManager);\n\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getHashRate<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getHashRate(web3Context.requestManager);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getGasPrice<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getGasPrice(web3Context.requestManager);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockNumber<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getBlockNumber(web3Context.requestManager);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBalance<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getBalance(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getStorageAt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tstorageSlot: Numbers,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst storageSlotFormatted = format({ format: 'uint' }, storageSlot, ETH_DATA_FORMAT);\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getStorageAt(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tstorageSlotFormatted,\n\t\tblockNumberFormatted,\n\t);\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getCode<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getCode(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlock<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\thydrated = false,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockByHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\thydrated,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockByNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\thydrated,\n\t\t);\n\t}\n\treturn format(blockSchema, response as unknown as Block, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockTransactionCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockTransactionCountByHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockTransactionCountByNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t);\n\t}\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockUncleCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleCountByBlockHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleCountByBlockNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t);\n\t}\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getUncle<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\tuncleIndex: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst uncleIndexFormatted = format({ format: 'uint' }, uncleIndex, ETH_DATA_FORMAT);\n\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleByBlockHashAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\tuncleIndexFormatted,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleByBlockNumberAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\tuncleIndexFormatted,\n\t\t);\n\t}\n\n\treturn format(blockSchema, response as unknown as Block, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransaction<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionHashFormatted = format(\n\t\t{ format: 'bytes32' },\n\t\ttransactionHash,\n\t\tDEFAULT_RETURN_FORMAT,\n\t);\n\tconst response = await ethRpcMethods.getTransactionByHash(\n\t\tweb3Context.requestManager,\n\t\ttransactionHashFormatted,\n\t);\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: formatTransaction(response, returnFormat, { transactionSchema: transactionInfoSchema });\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getPendingTransactions<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n\n\treturn response.map(transaction =>\n\t\tformatTransaction(transaction as unknown as Transaction, returnFormat),\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionFromBlock<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\ttransactionIndex: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionIndexFormatted = format({ format: 'uint' }, transactionIndex, ETH_DATA_FORMAT);\n\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getTransactionByBlockHashAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\ttransactionIndexFormatted,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getTransactionByBlockNumberAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\ttransactionIndexFormatted,\n\t\t);\n\t}\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: formatTransaction(response, returnFormat, { transactionSchema: transactionInfoSchema });\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionReceipt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionHashFormatted = format(\n\t\t{ format: 'bytes32' },\n\t\ttransactionHash,\n\t\tDEFAULT_RETURN_FORMAT,\n\t);\n\tconst response = await ethRpcMethods.getTransactionReceipt(\n\t\tweb3Context.requestManager,\n\t\ttransactionHashFormatted,\n\t);\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: (format(\n\t\t\t\ttransactionReceiptSchema,\n\t\t\t\tresponse as unknown as TransactionReceipt,\n\t\t\t\treturnFormat,\n\t\t  ) as TransactionReceipt);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getTransactionCount(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendTransaction<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction:\n\t\t| Transaction\n\t\t| TransactionWithFromLocalWalletIndex\n\t\t| TransactionWithToLocalWalletIndex\n\t\t| TransactionWithFromAndToLocalWalletIndex,\n\treturnFormat: ReturnFormat,\n\toptions: SendTransactionOptions<ResolveType> = { checkRevertBeforeSending: true },\n): Web3PromiEvent<ResolveType, SendTransactionEvents<ReturnFormat>> {\n\tconst promiEvent = new Web3PromiEvent<ResolveType, SendTransactionEvents<ReturnFormat>>(\n\t\t(resolve, reject) => {\n\t\t\tsetImmediate(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tlet transactionFormatted = formatTransaction(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...transaction,\n\t\t\t\t\t\t\tfrom: getTransactionFromOrToAttr('from', web3Context, transaction),\n\t\t\t\t\t\t\tto: getTransactionFromOrToAttr('to', web3Context, transaction),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t!options?.ignoreGasPricing &&\n\t\t\t\t\t\tisNullish(transactionFormatted.gasPrice) &&\n\t\t\t\t\t\t(isNullish(transaction.maxPriorityFeePerGas) ||\n\t\t\t\t\t\t\tisNullish(transaction.maxFeePerGas))\n\t\t\t\t\t) {\n\t\t\t\t\t\ttransactionFormatted = {\n\t\t\t\t\t\t\t...transactionFormatted,\n\t\t\t\t\t\t\t// TODO gasPrice, maxPriorityFeePerGas, maxFeePerGas\n\t\t\t\t\t\t\t// should not be included if undefined, but currently are\n\t\t\t\t\t\t\t...(await getTransactionGasPricing(\n\t\t\t\t\t\t\t\ttransactionFormatted,\n\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t\t\t)),\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (options.checkRevertBeforeSending !== false) {\n\t\t\t\t\t\t\tconst reason = await getRevertReason(\n\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\ttransactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t\toptions.contractAbi,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (reason !== undefined) {\n\t\t\t\t\t\t\t\tconst error = await getTransactionError<ReturnFormat>(\n\t\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\t\ttransactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\toptions.contractAbi,\n\t\t\t\t\t\t\t\t\treason,\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tif (promiEvent.listenerCount('error') > 0) {\n\t\t\t\t\t\t\t\t\tpromiEvent.emit('error', error);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (promiEvent.listenerCount('sending') > 0) {\n\t\t\t\t\t\t\tpromiEvent.emit('sending', transactionFormatted);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet transactionHash: HexString;\n\t\t\t\t\t\tlet wallet: Web3BaseWalletAccount | undefined;\n\n\t\t\t\t\t\tif (web3Context.wallet && !isNullish(transactionFormatted.from)) {\n\t\t\t\t\t\t\twallet = web3Context.wallet.get(transactionFormatted.from);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (wallet) {\n\t\t\t\t\t\t\tconst signedTransaction = await wallet.signTransaction(\n\t\t\t\t\t\t\t\ttransactionFormatted,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\ttransactionHash = await trySendTransaction(\n\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\tasync (): Promise<string> =>\n\t\t\t\t\t\t\t\t\tethRpcMethods.sendRawTransaction(\n\t\t\t\t\t\t\t\t\t\tweb3Context.requestManager,\n\t\t\t\t\t\t\t\t\t\tsignedTransaction.rawTransaction,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tsignedTransaction.transactionHash,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttransactionHash = await trySendTransaction(\n\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\tasync (): Promise<string> =>\n\t\t\t\t\t\t\t\t\tethRpcMethods.sendTransaction(\n\t\t\t\t\t\t\t\t\t\tweb3Context.requestManager,\n\t\t\t\t\t\t\t\t\t\ttransactionFormatted as Partial<TransactionWithSenderAPI>,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst transactionHashFormatted = format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\ttransactionHash as Bytes,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (promiEvent.listenerCount('sent') > 0) {\n\t\t\t\t\t\t\tpromiEvent.emit('sent', transactionFormatted);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (promiEvent.listenerCount('transactionHash') > 0) {\n\t\t\t\t\t\t\tpromiEvent.emit('transactionHash', transactionHashFormatted);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst transactionReceipt = await waitForTransactionReceipt(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceiptFormatted = format(\n\t\t\t\t\t\t\ttransactionReceiptSchema,\n\t\t\t\t\t\t\ttransactionReceipt,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (promiEvent.listenerCount('receipt') > 0) {\n\t\t\t\t\t\t\tpromiEvent.emit('receipt', transactionReceiptFormatted);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (options?.transactionResolver) {\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\toptions?.transactionResolver(\n\t\t\t\t\t\t\t\t\ttransactionReceiptFormatted,\n\t\t\t\t\t\t\t\t) as unknown as ResolveType,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (transactionReceipt.status === BigInt(0)) {\n\t\t\t\t\t\t\tconst error = await getTransactionError<ReturnFormat>(\n\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\ttransactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t\ttransactionReceiptFormatted,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\toptions?.contractAbi,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (promiEvent.listenerCount('error') > 0) {\n\t\t\t\t\t\t\t\tpromiEvent.emit('error', error);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolve(transactionReceiptFormatted as unknown as ResolveType);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (promiEvent.listenerCount('confirmation') > 0) {\n\t\t\t\t\t\t\twatchTransactionForConfirmations<\n\t\t\t\t\t\t\t\tReturnFormat,\n\t\t\t\t\t\t\t\tSendTransactionEvents<ReturnFormat>,\n\t\t\t\t\t\t\t\tResolveType\n\t\t\t\t\t\t\t>(\n\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\tpromiEvent,\n\t\t\t\t\t\t\t\ttransactionReceiptFormatted as TransactionReceipt,\n\t\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tlet _error = error;\n\n\t\t\t\t\t\tif (_error instanceof ContractExecutionError && web3Context.handleRevert) {\n\t\t\t\t\t\t\t_error = await getTransactionError(\n\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\ttransactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\toptions?.contractAbi,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(_error instanceof InvalidResponseError ||\n\t\t\t\t\t\t\t\t_error instanceof ContractExecutionError ||\n\t\t\t\t\t\t\t\t_error instanceof TransactionRevertWithCustomError ||\n\t\t\t\t\t\t\t\t_error instanceof TransactionRevertedWithoutReasonError ||\n\t\t\t\t\t\t\t\t_error instanceof TransactionRevertInstructionError) &&\n\t\t\t\t\t\t\tpromiEvent.listenerCount('error') > 0\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tpromiEvent.emit('error', _error);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treject(_error);\n\t\t\t\t\t}\n\t\t\t\t})() as unknown;\n\t\t\t});\n\t\t},\n\t);\n\n\treturn promiEvent;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendSignedTransaction<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tsignedTransaction: Bytes,\n\treturnFormat: ReturnFormat,\n\toptions: SendSignedTransactionOptions<ResolveType> = { checkRevertBeforeSending: true },\n): Web3PromiEvent<ResolveType, SendSignedTransactionEvents<ReturnFormat>> {\n\t// TODO - Promise returned in function argument where a void return was expected\n\t// eslint-disable-next-line @typescript-eslint/no-misused-promises\n\tconst promiEvent = new Web3PromiEvent<ResolveType, SendSignedTransactionEvents<ReturnFormat>>(\n\t\t(resolve, reject) => {\n\t\t\tsetImmediate(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\t// Formatting signedTransaction to be send to RPC endpoint\n\t\t\t\t\tconst signedTransactionFormattedHex = format(\n\t\t\t\t\t\t{ format: 'bytes' },\n\t\t\t\t\t\tsignedTransaction,\n\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t);\n\t\t\t\t\tconst unSerializedTransaction = TransactionFactory.fromSerializedData(\n\t\t\t\t\t\tbytesToUint8Array(hexToBytes(signedTransactionFormattedHex)),\n\t\t\t\t\t);\n\t\t\t\t\tconst unSerializedTransactionWithFrom = {\n\t\t\t\t\t\t...unSerializedTransaction.toJSON(),\n\t\t\t\t\t\t// Some providers will default `from` to address(0) causing the error\n\t\t\t\t\t\t// reported from `eth_call` to not be the reason the user's tx failed\n\t\t\t\t\t\t// e.g. `eth_call` will return an Out of Gas error for a failed\n\t\t\t\t\t\t// smart contract execution contract, because the sender, address(0),\n\t\t\t\t\t\t// has no balance to pay for the gas of the transaction execution\n\t\t\t\t\t\tfrom: unSerializedTransaction.getSenderAddress().toString(),\n\t\t\t\t\t};\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (options.checkRevertBeforeSending !== false) {\n\t\t\t\t\t\t\tconst reason = await getRevertReason(\n\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\tunSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t\toptions.contractAbi,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (reason !== undefined) {\n\t\t\t\t\t\t\t\tconst error = await getTransactionError<ReturnFormat>(\n\t\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\t\tunSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\toptions.contractAbi,\n\t\t\t\t\t\t\t\t\treason,\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tif (promiEvent.listenerCount('error') > 0) {\n\t\t\t\t\t\t\t\t\tpromiEvent.emit('error', error);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (promiEvent.listenerCount('sending') > 0) {\n\t\t\t\t\t\t\tpromiEvent.emit('sending', signedTransactionFormattedHex);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst transactionHash = await trySendTransaction(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\tasync (): Promise<string> =>\n\t\t\t\t\t\t\t\tethRpcMethods.sendRawTransaction(\n\t\t\t\t\t\t\t\t\tweb3Context.requestManager,\n\t\t\t\t\t\t\t\t\tsignedTransactionFormattedHex,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (promiEvent.listenerCount('sent') > 0) {\n\t\t\t\t\t\t\tpromiEvent.emit('sent', signedTransactionFormattedHex);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst transactionHashFormatted = format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\ttransactionHash as Bytes,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (promiEvent.listenerCount('transactionHash') > 0) {\n\t\t\t\t\t\t\tpromiEvent.emit('transactionHash', transactionHashFormatted);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst transactionReceipt = await waitForTransactionReceipt(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceiptFormatted = format(\n\t\t\t\t\t\t\ttransactionReceiptSchema,\n\t\t\t\t\t\t\ttransactionReceipt,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (promiEvent.listenerCount('receipt') > 0) {\n\t\t\t\t\t\t\tpromiEvent.emit('receipt', transactionReceiptFormatted);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (options?.transactionResolver) {\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\toptions?.transactionResolver(\n\t\t\t\t\t\t\t\t\ttransactionReceiptFormatted,\n\t\t\t\t\t\t\t\t) as unknown as ResolveType,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (transactionReceipt.status === BigInt(0)) {\n\t\t\t\t\t\t\tconst error = await getTransactionError<ReturnFormat>(\n\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\tunSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t\ttransactionReceiptFormatted,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\toptions?.contractAbi,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (promiEvent.listenerCount('error') > 0) {\n\t\t\t\t\t\t\t\tpromiEvent.emit('error', error);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolve(transactionReceiptFormatted as unknown as ResolveType);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (promiEvent.listenerCount('confirmation') > 0) {\n\t\t\t\t\t\t\twatchTransactionForConfirmations<\n\t\t\t\t\t\t\t\tReturnFormat,\n\t\t\t\t\t\t\t\tSendSignedTransactionEvents<ReturnFormat>,\n\t\t\t\t\t\t\t\tResolveType\n\t\t\t\t\t\t\t>(\n\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\tpromiEvent,\n\t\t\t\t\t\t\t\ttransactionReceiptFormatted as TransactionReceipt,\n\t\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tlet _error = error;\n\n\t\t\t\t\t\tif (_error instanceof ContractExecutionError && web3Context.handleRevert) {\n\t\t\t\t\t\t\t_error = await getTransactionError(\n\t\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\t\tunSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\toptions?.contractAbi,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(_error instanceof InvalidResponseError ||\n\t\t\t\t\t\t\t\t_error instanceof ContractExecutionError ||\n\t\t\t\t\t\t\t\t_error instanceof TransactionRevertWithCustomError ||\n\t\t\t\t\t\t\t\t_error instanceof TransactionRevertedWithoutReasonError ||\n\t\t\t\t\t\t\t\t_error instanceof TransactionRevertInstructionError) &&\n\t\t\t\t\t\t\tpromiEvent.listenerCount('error') > 0\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tpromiEvent.emit('error', _error);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treject(_error);\n\t\t\t\t\t}\n\t\t\t\t})() as unknown;\n\t\t\t});\n\t\t},\n\t);\n\n\treturn promiEvent;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function sign<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tmessage: Bytes,\n\taddressOrIndex: Address | number,\n\treturnFormat: ReturnFormat,\n) {\n\tconst messageFormatted = format({ format: 'bytes' }, message, DEFAULT_RETURN_FORMAT);\n\tif (web3Context.wallet?.get(addressOrIndex)) {\n\t\tconst wallet = web3Context.wallet.get(addressOrIndex) as Web3BaseWalletAccount;\n\t\tconst signed = wallet.sign(messageFormatted);\n\t\treturn format(SignatureObjectSchema, signed, returnFormat);\n\t}\n\n\tif (typeof addressOrIndex === 'number') {\n\t\tthrow new SignatureError(\n\t\t\tmessage,\n\t\t\t'RPC method \"eth_sign\" does not support index signatures',\n\t\t);\n\t}\n\n\tconst response = await ethRpcMethods.sign(\n\t\tweb3Context.requestManager,\n\t\taddressOrIndex,\n\t\tmessageFormatted,\n\t);\n\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function signTransaction<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: Transaction,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.signTransaction(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t);\n\t// Some clients only return the encoded signed transaction (e.g. Ganache)\n\t// while clients such as Geth return the desired SignedTransactionInfoAPI object\n\treturn isString(response as HexStringBytes)\n\t\t? decodeSignedTransaction(response as HexStringBytes, returnFormat)\n\t\t: {\n\t\t\t\traw: format(\n\t\t\t\t\t{ format: 'bytes' },\n\t\t\t\t\t(response as SignedTransactionInfoAPI).raw,\n\t\t\t\t\treturnFormat,\n\t\t\t\t),\n\t\t\t\ttx: formatTransaction((response as SignedTransactionInfoAPI).tx, returnFormat),\n\t\t  };\n}\n\n// TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function call<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: TransactionCall,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.call(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n// TODO - Investigate whether response is padded as 1.x docs suggest\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function estimateGas<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: Transaction,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionFormatted = formatTransaction(transaction, ETH_DATA_FORMAT);\n\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.estimateGas(\n\t\tweb3Context.requestManager,\n\t\ttransactionFormatted,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n// TODO - Add input formatting to filter\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getLogs<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3EthExecutionAPI>,\n\tfilter: Filter,\n\treturnFormat: ReturnFormat,\n) {\n\t// format type bigint or number toBlock and fromBlock to hexstring.\n\tlet { toBlock, fromBlock } = filter;\n\tif (!isNullish(toBlock)) {\n\t\tif (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n\t\t\ttoBlock = numberToHex(toBlock);\n\t\t}\n\t}\n\tif (!isNullish(fromBlock)) {\n\t\tif (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n\t\t\tfromBlock = numberToHex(fromBlock);\n\t\t}\n\t}\n\n\tconst formattedFilter = { ...filter, fromBlock, toBlock };\n\n\tconst response = await ethRpcMethods.getLogs(web3Context.requestManager, formattedFilter);\n\n\tconst result = response.map(res => {\n\t\tif (typeof res === 'string') {\n\t\t\treturn res;\n\t\t}\n\n\t\treturn format(logSchema, res as unknown as Log, returnFormat);\n\t});\n\n\treturn result;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getChainId<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getChainId(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\t// Response is number in hex formatted string\n\t\tresponse as unknown as number,\n\t\treturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getProof<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3EthExecutionAPI>,\n\taddress: Address,\n\tstorageKeys: Bytes[],\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst storageKeysFormatted = storageKeys.map(storageKey =>\n\t\tformat({ format: 'bytes' }, storageKey, ETH_DATA_FORMAT),\n\t);\n\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.getProof(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tstorageKeysFormatted,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format(accountSchema, response as unknown as AccountObject, returnFormat);\n}\n\n// TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getFeeHistory<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblockCount: Numbers,\n\tnewestBlock: BlockNumberOrTag = web3Context.defaultBlock,\n\trewardPercentiles: Numbers[],\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockCountFormatted = format({ format: 'uint' }, blockCount, ETH_DATA_FORMAT);\n\n\tconst newestBlockFormatted = isBlockTag(newestBlock as string)\n\t\t? (newestBlock as BlockTag)\n\t\t: format({ format: 'uint' }, newestBlock as Numbers, ETH_DATA_FORMAT);\n\n\tconst rewardPercentilesFormatted = format(\n\t\t{\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\tformat: 'uint',\n\t\t\t},\n\t\t},\n\t\trewardPercentiles,\n\t\tNUMBER_DATA_FORMAT,\n\t);\n\n\tconst response = await ethRpcMethods.getFeeHistory(\n\t\tweb3Context.requestManager,\n\t\tblockCountFormatted,\n\t\tnewestBlockFormatted,\n\t\trewardPercentilesFormatted,\n\t);\n\n\treturn format(feeHistorySchema, response as unknown as FeeHistory, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function createAccessList<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: TransactionForAccessList,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = (await ethRpcMethods.createAccessList(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t\tblockNumberFormatted,\n\t)) as unknown as AccessListResult;\n\n\treturn format(accessListResultSchema, response, returnFormat);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}