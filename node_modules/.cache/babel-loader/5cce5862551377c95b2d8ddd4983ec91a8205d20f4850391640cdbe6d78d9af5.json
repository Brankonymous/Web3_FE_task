{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});","map":{"version":3,"names":[],"sources":["/Users/branko/Documents/Web3_FE_task/node_modules/web3-types/src/eth_contract_types.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Address, Uint } from './eth_types.js';\nimport { SupportedProviders } from './web3_base_provider.js';\nimport { Bytes, HexString } from './primitives_types.js';\nimport { EthExecutionAPI } from './apis/eth_execution_api.js';\n\nexport interface ContractInitOptions {\n\t/**\n\t * The maximum gas provided for a transaction (gas limit).\n\t */\n\treadonly gas?: Uint;\n\treadonly gasLimit?: Uint;\n\t/**\n\t * The gas price in wei to use for transactions.\n\t */\n\treadonly gasPrice?: Uint;\n\t/**\n\t * The address transactions should be made from\n\t */\n\treadonly from?: Address;\n\t/**\n\t * The byte code of the contract. Used when the contract gets {@link Contract.deploy | deployed}\n\t */\n\treadonly data?: Bytes;\n\treadonly input?: Bytes;\n\n\treadonly provider?: SupportedProviders<EthExecutionAPI> | string;\n\t/**\n\t * If `true`, the defaults of the contract instance will be updated automatically based on the changes of the context used to instantiate the contract.\n\t */\n\treadonly syncWithContext?: boolean;\n}\n\nexport interface NonPayableCallOptions {\n\tnonce?: HexString;\n\t/**\n\t * The address which is the call (the transaction) should be made from. For calls the `from` property is optional however it is\n\t * highly recommended to explicitly set it or it may default to address(0) depending on your node or provider.\n\t */\n\tfrom?: Address;\n\t/**\n\t * The maximum gas (gas limit) provided for this call (this transaction)\n\t */\n\tgas?: string;\n\tmaxPriorityFeePerGas?: HexString;\n\tmaxFeePerGas?: HexString;\n\t/**\n\t * The gas price in wei to use for this call `transaction`.\n\t */\n\tgasPrice?: string;\n\ttype?: string | number;\n}\n\nexport interface PayableCallOptions extends NonPayableCallOptions {\n\t/**\n\t *\n\t */\n\tvalue?: string;\n}\n"],"mappings":";;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}