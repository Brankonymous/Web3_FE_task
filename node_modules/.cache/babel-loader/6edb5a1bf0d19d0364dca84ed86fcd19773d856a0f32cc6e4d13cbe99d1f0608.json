{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rejectIfConditionAtInterval = exports.rejectIfTimeout = exports.pollTillDefined = exports.waitWithTimeout = exports.isPromise = void 0;\nconst web3_validator_1 = require(\"web3-validator\");\n/**\n * An alternative to the node function `isPromise` that exists in `util/types` because it is not available on the browser.\n * @param object - to check if it is a `Promise`\n * @returns `true` if it is an `object` or a `function` that has a `then` function. And returns `false` otherwise.\n */\nfunction isPromise(object) {\n  return (typeof object === 'object' || typeof object === 'function') &&\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  typeof object.then === 'function';\n}\nexports.isPromise = isPromise;\n/**\n * Wait for a promise but interrupt it if it did not resolve within a given timeout.\n * If the timeout reached, before the promise code resolve, either throw an error if an error object was provided, or return `undefined`.\n * @param awaitable - The promise or function to wait for.\n * @param timeout - The timeout in milliseconds.\n * @param error - (Optional) The error to throw if the timeout reached.\n */\nfunction waitWithTimeout(awaitable, timeout, error) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let timeoutId;\n    const result = yield Promise.race([awaitable instanceof Promise ? awaitable : awaitable(), new Promise((resolve, reject) => {\n      timeoutId = setTimeout(() => error ? reject(error) : resolve(undefined), timeout);\n    })]);\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    if (result instanceof Error) {\n      throw result;\n    }\n    return result;\n  });\n}\nexports.waitWithTimeout = waitWithTimeout;\n/**\n * Repeatedly calls an async function with a given interval until the result of the function is defined (not undefined or null),\n * or until a timeout is reached.\n * @param func - The function to call.\n * @param interval - The interval in milliseconds.\n */\nfunction pollTillDefined(func, interval) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const awaitableRes = waitWithTimeout(func, interval);\n    let intervalId;\n    const polledRes = new Promise((resolve, reject) => {\n      intervalId = setInterval(() => {\n        (() => __awaiter(this, void 0, void 0, function* () {\n          try {\n            const res = yield waitWithTimeout(func, interval);\n            if (!(0, web3_validator_1.isNullish)(res)) {\n              clearInterval(intervalId);\n              resolve(res);\n            }\n          } catch (error) {\n            clearInterval(intervalId);\n            reject(error);\n          }\n        }))();\n      }, interval);\n    });\n    // If the first call to awaitableRes succeeded, return the result\n    const res = yield awaitableRes;\n    if (!(0, web3_validator_1.isNullish)(res)) {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n      return res;\n    }\n    return polledRes;\n  });\n}\nexports.pollTillDefined = pollTillDefined;\n/**\n * Enforce a timeout on a promise, so that it can be rejected if it takes too long to complete\n * @param timeout - The timeout to enforced in milliseconds.\n * @param error - The error to throw if the timeout is reached.\n * @returns A tuple of the timeout id and the promise that will be rejected if the timeout is reached.\n *\n * @example\n * ```ts\n * const [timerId, promise] = web3.utils.rejectIfTimeout(100, new Error('time out'));\n * ```\n */\nfunction rejectIfTimeout(timeout, error) {\n  let timeoutId;\n  const rejectOnTimeout = new Promise((_, reject) => {\n    timeoutId = setTimeout(() => {\n      reject(error);\n    }, timeout);\n  });\n  return [timeoutId, rejectOnTimeout];\n}\nexports.rejectIfTimeout = rejectIfTimeout;\n/**\n * Sets an interval that repeatedly executes the given cond function with the specified interval between each call.\n * If the condition is met, the interval is cleared and a Promise that rejects with the returned value is returned.\n * @param cond - The function/confition to call.\n * @param interval - The interval in milliseconds.\n * @returns - an array with the interval ID and the Promise.\n */\nfunction rejectIfConditionAtInterval(cond, interval) {\n  let intervalId;\n  const rejectIfCondition = new Promise((_, reject) => {\n    intervalId = setInterval(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        const error = yield cond();\n        if (error) {\n          clearInterval(intervalId);\n          reject(error);\n        }\n      }))();\n    }, interval);\n  });\n  return [intervalId, rejectIfCondition];\n}\nexports.rejectIfConditionAtInterval = rejectIfConditionAtInterval;","map":{"version":3,"names":["web3_validator_1","require","isPromise","object","then","exports","waitWithTimeout","awaitable","timeout","error","timeoutId","result","Promise","race","resolve","reject","setTimeout","undefined","clearTimeout","Error","pollTillDefined","func","interval","awaitableRes","intervalId","polledRes","setInterval","__awaiter","res","isNullish","clearInterval","rejectIfTimeout","rejectOnTimeout","_","rejectIfConditionAtInterval","cond","rejectIfCondition"],"sources":["/Users/branko/Documents/Web3_FE_task/node_modules/web3-utils/src/promise_helpers.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { isNullish } from 'web3-validator';\n\n/**\n * An alternative to the node function `isPromise` that exists in `util/types` because it is not available on the browser.\n * @param object - to check if it is a `Promise`\n * @returns `true` if it is an `object` or a `function` that has a `then` function. And returns `false` otherwise.\n */\nexport function isPromise(object: unknown): boolean {\n\treturn (\n\t\t(typeof object === 'object' || typeof object === 'function') &&\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\ttypeof (object as { then: unknown }).then === 'function'\n\t);\n}\n\nexport type AsyncFunction<T, K = unknown> = (...args: K[]) => Promise<T>;\n\nexport function waitWithTimeout<T>(\n\tawaitable: Promise<T> | AsyncFunction<T>,\n\ttimeout: number,\n\terror: Error,\n): Promise<T>;\nexport function waitWithTimeout<T>(\n\tawaitable: Promise<T> | AsyncFunction<T>,\n\ttimeout: number,\n): Promise<T | undefined>;\n\n/**\n * Wait for a promise but interrupt it if it did not resolve within a given timeout.\n * If the timeout reached, before the promise code resolve, either throw an error if an error object was provided, or return `undefined`.\n * @param awaitable - The promise or function to wait for.\n * @param timeout - The timeout in milliseconds.\n * @param error - (Optional) The error to throw if the timeout reached.\n */\nexport async function waitWithTimeout<T>(\n\tawaitable: Promise<T> | AsyncFunction<T>,\n\ttimeout: number,\n\terror?: Error,\n): Promise<T | undefined> {\n\tlet timeoutId: NodeJS.Timeout | undefined;\n\tconst result = await Promise.race([\n\t\tawaitable instanceof Promise ? awaitable : awaitable(),\n\t\tnew Promise<undefined | Error>((resolve, reject) => {\n\t\t\ttimeoutId = setTimeout(() => (error ? reject(error) : resolve(undefined)), timeout);\n\t\t}),\n\t]);\n\tif (timeoutId) {\n\t\tclearTimeout(timeoutId);\n\t}\n\tif (result instanceof Error) {\n\t\tthrow result;\n\t}\n\treturn result;\n}\n/**\n * Repeatedly calls an async function with a given interval until the result of the function is defined (not undefined or null),\n * or until a timeout is reached.\n * @param func - The function to call.\n * @param interval - The interval in milliseconds.\n */\nexport async function pollTillDefined<T>(\n\tfunc: AsyncFunction<T>,\n\tinterval: number,\n): Promise<Exclude<T, undefined>> {\n\tconst awaitableRes = waitWithTimeout(func, interval);\n\n\tlet intervalId: NodeJS.Timer | undefined;\n\tconst polledRes = new Promise<Exclude<T, undefined>>((resolve, reject) => {\n\t\tintervalId = setInterval(() => {\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst res = await waitWithTimeout(func, interval);\n\n\t\t\t\t\tif (!isNullish(res)) {\n\t\t\t\t\t\tclearInterval(intervalId);\n\t\t\t\t\t\tresolve(res as unknown as Exclude<T, undefined>);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tclearInterval(intervalId);\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t})() as unknown;\n\t\t}, interval);\n\t});\n\n\t// If the first call to awaitableRes succeeded, return the result\n\tconst res = await awaitableRes;\n\tif (!isNullish(res)) {\n\t\tif (intervalId) {\n\t\t\tclearInterval(intervalId);\n\t\t}\n\t\treturn res as unknown as Exclude<T, undefined>;\n\t}\n\n\treturn polledRes;\n}\n/**\n * Enforce a timeout on a promise, so that it can be rejected if it takes too long to complete\n * @param timeout - The timeout to enforced in milliseconds.\n * @param error - The error to throw if the timeout is reached.\n * @returns A tuple of the timeout id and the promise that will be rejected if the timeout is reached.\n *\n * @example\n * ```ts\n * const [timerId, promise] = web3.utils.rejectIfTimeout(100, new Error('time out'));\n * ```\n */\nexport function rejectIfTimeout(timeout: number, error: Error): [NodeJS.Timer, Promise<never>] {\n\tlet timeoutId: NodeJS.Timer | undefined;\n\tconst rejectOnTimeout = new Promise<never>((_, reject) => {\n\t\ttimeoutId = setTimeout(() => {\n\t\t\treject(error);\n\t\t}, timeout);\n\t});\n\treturn [timeoutId as unknown as NodeJS.Timer, rejectOnTimeout];\n}\n/**\n * Sets an interval that repeatedly executes the given cond function with the specified interval between each call.\n * If the condition is met, the interval is cleared and a Promise that rejects with the returned value is returned.\n * @param cond - The function/confition to call.\n * @param interval - The interval in milliseconds.\n * @returns - an array with the interval ID and the Promise.\n */\nexport function rejectIfConditionAtInterval<T>(\n\tcond: AsyncFunction<T | undefined>,\n\tinterval: number,\n): [NodeJS.Timer, Promise<never>] {\n\tlet intervalId: NodeJS.Timer | undefined;\n\tconst rejectIfCondition = new Promise<never>((_, reject) => {\n\t\tintervalId = setInterval(() => {\n\t\t\t(async () => {\n\t\t\t\tconst error = await cond();\n\t\t\t\tif (error) {\n\t\t\t\t\tclearInterval(intervalId);\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t})() as unknown;\n\t\t}, interval);\n\t});\n\treturn [intervalId as unknown as NodeJS.Timer, rejectIfCondition];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}