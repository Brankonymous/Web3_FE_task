{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectRawTransactionType = exports.detectTransactionType = exports.defaultTransactionTypeParser = void 0;\nconst web3_utils_1 = require(\"web3-utils\");\nconst web3_types_1 = require(\"web3-types\");\nconst web3_validator_1 = require(\"web3-validator\");\nconst web3_errors_1 = require(\"web3-errors\");\n// undefined is treated as null for JSON schema validator\nconst transactionType0x0Schema = {\n  type: 'object',\n  properties: {\n    accessList: {\n      type: 'null'\n    },\n    maxFeePerGas: {\n      type: 'null'\n    },\n    maxPriorityFeePerGas: {\n      type: 'null'\n    }\n  }\n};\nconst transactionType0x1Schema = {\n  type: 'object',\n  properties: {\n    maxFeePerGas: {\n      type: 'null'\n    },\n    maxPriorityFeePerGas: {\n      type: 'null'\n    }\n  }\n};\nconst transactionType0x2Schema = {\n  type: 'object',\n  properties: {\n    gasPrice: {\n      type: 'null'\n    }\n  }\n};\nconst validateTxTypeAndHandleErrors = (txSchema, tx, txType) => {\n  try {\n    web3_validator_1.validator.validateJSONSchema(txSchema, tx);\n  } catch (error) {\n    if (error instanceof web3_validator_1.Web3ValidatorError)\n      // Erroneously reported error\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      throw new web3_errors_1.InvalidPropertiesForTransactionTypeError(error.errors, txType);\n    throw error;\n  }\n};\nconst defaultTransactionTypeParser = transaction => {\n  var _a, _b;\n  const tx = transaction;\n  if (!(0, web3_validator_1.isNullish)(tx.type)) {\n    let txSchema;\n    switch (tx.type) {\n      case '0x0':\n        txSchema = transactionType0x0Schema;\n        break;\n      case '0x1':\n        txSchema = transactionType0x1Schema;\n        break;\n      case '0x2':\n        txSchema = transactionType0x2Schema;\n        break;\n      default:\n        return (0, web3_utils_1.format)({\n          format: 'uint'\n        }, tx.type, web3_types_1.ETH_DATA_FORMAT);\n    }\n    validateTxTypeAndHandleErrors(txSchema, tx, tx.type);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, tx.type, web3_types_1.ETH_DATA_FORMAT);\n  }\n  if (!(0, web3_validator_1.isNullish)(tx.maxFeePerGas) || !(0, web3_validator_1.isNullish)(tx.maxPriorityFeePerGas)) {\n    validateTxTypeAndHandleErrors(transactionType0x2Schema, tx, '0x2');\n    return '0x2';\n  }\n  if (!(0, web3_validator_1.isNullish)(tx.accessList)) {\n    validateTxTypeAndHandleErrors(transactionType0x1Schema, tx, '0x1');\n    return '0x1';\n  }\n  // We don't return 0x0 here, because if gasPrice is not\n  // undefined, we still don't know if the network\n  // supports EIP-2718 (https://eips.ethereum.org/EIPS/eip-2718)\n  // and whether we should return undefined for legacy txs,\n  // or type 0x0 for legacy txs post EIP-2718\n  if (!(0, web3_validator_1.isNullish)(tx.gasPrice)) {\n    validateTxTypeAndHandleErrors(transactionType0x0Schema, tx, '0x0');\n  }\n  const givenHardfork = (_a = tx.hardfork) !== null && _a !== void 0 ? _a : (_b = tx.common) === null || _b === void 0 ? void 0 : _b.hardfork;\n  // If we don't have a hardfork, then we can't be sure we're post\n  // EIP-2718 where transaction types are available\n  if (givenHardfork === undefined) return undefined;\n  const hardforkIndex = Object.keys(web3_types_1.HardforksOrdered).indexOf(givenHardfork);\n  // Unknown hardfork\n  if (hardforkIndex === undefined) return undefined;\n  // givenHardfork is London or later, so EIP-2718 is supported\n  if (hardforkIndex >= Object.keys(web3_types_1.HardforksOrdered).indexOf('london')) return !(0, web3_validator_1.isNullish)(tx.gasPrice) ? '0x0' : '0x2';\n  // givenHardfork is Berlin, tx.accessList is undefined, assume type is 0x0\n  if (hardforkIndex === Object.keys(web3_types_1.HardforksOrdered).indexOf('berlin')) return '0x0';\n  // For all pre-Berlin hardforks, return undefined since EIP-2718\n  // isn't supported\n  return undefined;\n};\nexports.defaultTransactionTypeParser = defaultTransactionTypeParser;\nconst detectTransactionType = (transaction, web3Context) => {\n  var _a;\n  return ((_a = web3Context === null || web3Context === void 0 ? void 0 : web3Context.transactionTypeParser) !== null && _a !== void 0 ? _a : exports.defaultTransactionTypeParser)(transaction);\n};\nexports.detectTransactionType = detectTransactionType;\nconst detectRawTransactionType = transaction => transaction[0] > 0x7f ? '0x0' : (0, web3_utils_1.toHex)(transaction[0]);\nexports.detectRawTransactionType = detectRawTransactionType;","map":{"version":3,"names":["web3_utils_1","require","web3_types_1","web3_validator_1","web3_errors_1","transactionType0x0Schema","type","properties","accessList","maxFeePerGas","maxPriorityFeePerGas","transactionType0x1Schema","transactionType0x2Schema","gasPrice","validateTxTypeAndHandleErrors","txSchema","tx","txType","validator","validateJSONSchema","error","Web3ValidatorError","InvalidPropertiesForTransactionTypeError","errors","defaultTransactionTypeParser","transaction","isNullish","format","ETH_DATA_FORMAT","givenHardfork","_a","hardfork","_b","common","undefined","hardforkIndex","Object","keys","HardforksOrdered","indexOf","exports","detectTransactionType","web3Context","transactionTypeParser","detectRawTransactionType","toHex"],"sources":["/Users/branko/Documents/Web3_FE_task/node_modules/web3-eth/src/utils/detect_transaction_type.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { format, toHex } from 'web3-utils';\nimport { TransactionTypeParser, Web3Context } from 'web3-core';\nimport { EthExecutionAPI, HardforksOrdered, Transaction, ETH_DATA_FORMAT } from 'web3-types';\nimport { Web3ValidatorError, isNullish, validator } from 'web3-validator';\nimport { InvalidPropertiesForTransactionTypeError } from 'web3-errors';\n\nimport { InternalTransaction } from '../types.js';\n\n// undefined is treated as null for JSON schema validator\nconst transactionType0x0Schema = {\n\ttype: 'object',\n\tproperties: {\n\t\taccessList: {\n\t\t\ttype: 'null',\n\t\t},\n\t\tmaxFeePerGas: {\n\t\t\ttype: 'null',\n\t\t},\n\t\tmaxPriorityFeePerGas: {\n\t\t\ttype: 'null',\n\t\t},\n\t},\n};\nconst transactionType0x1Schema = {\n\ttype: 'object',\n\tproperties: {\n\t\tmaxFeePerGas: {\n\t\t\ttype: 'null',\n\t\t},\n\t\tmaxPriorityFeePerGas: {\n\t\t\ttype: 'null',\n\t\t},\n\t},\n};\nconst transactionType0x2Schema = {\n\ttype: 'object',\n\tproperties: {\n\t\tgasPrice: {\n\t\t\ttype: 'null',\n\t\t},\n\t},\n};\n\nconst validateTxTypeAndHandleErrors = (\n\ttxSchema: object,\n\ttx: Transaction,\n\ttxType: '0x0' | '0x1' | '0x2',\n) => {\n\ttry {\n\t\tvalidator.validateJSONSchema(txSchema, tx);\n\t} catch (error) {\n\t\tif (error instanceof Web3ValidatorError)\n\t\t\t// Erroneously reported error\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\t\tthrow new InvalidPropertiesForTransactionTypeError(error.errors, txType);\n\n\t\tthrow error;\n\t}\n};\n\nexport const defaultTransactionTypeParser: TransactionTypeParser = transaction => {\n\tconst tx = transaction as unknown as Transaction;\n\n\tif (!isNullish(tx.type)) {\n\t\tlet txSchema;\n\t\tswitch (tx.type) {\n\t\t\tcase '0x0':\n\t\t\t\ttxSchema = transactionType0x0Schema;\n\t\t\t\tbreak;\n\t\t\tcase '0x1':\n\t\t\t\ttxSchema = transactionType0x1Schema;\n\t\t\t\tbreak;\n\t\t\tcase '0x2':\n\t\t\t\ttxSchema = transactionType0x2Schema;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\treturn format({ format: 'uint' }, tx.type, ETH_DATA_FORMAT);\n\t\t}\n\n\t\tvalidateTxTypeAndHandleErrors(txSchema, tx, tx.type);\n\n\t\treturn format({ format: 'uint' }, tx.type, ETH_DATA_FORMAT);\n\t}\n\n\tif (!isNullish(tx.maxFeePerGas) || !isNullish(tx.maxPriorityFeePerGas)) {\n\t\tvalidateTxTypeAndHandleErrors(transactionType0x2Schema, tx, '0x2');\n\t\treturn '0x2';\n\t}\n\n\tif (!isNullish(tx.accessList)) {\n\t\tvalidateTxTypeAndHandleErrors(transactionType0x1Schema, tx, '0x1');\n\t\treturn '0x1';\n\t}\n\n\t// We don't return 0x0 here, because if gasPrice is not\n\t// undefined, we still don't know if the network\n\t// supports EIP-2718 (https://eips.ethereum.org/EIPS/eip-2718)\n\t// and whether we should return undefined for legacy txs,\n\t// or type 0x0 for legacy txs post EIP-2718\n\tif (!isNullish(tx.gasPrice)) {\n\t\tvalidateTxTypeAndHandleErrors(transactionType0x0Schema, tx, '0x0');\n\t}\n\n\tconst givenHardfork = tx.hardfork ?? tx.common?.hardfork;\n\t// If we don't have a hardfork, then we can't be sure we're post\n\t// EIP-2718 where transaction types are available\n\tif (givenHardfork === undefined) return undefined;\n\n\tconst hardforkIndex = Object.keys(HardforksOrdered).indexOf(givenHardfork);\n\n\t// Unknown hardfork\n\tif (hardforkIndex === undefined) return undefined;\n\n\t// givenHardfork is London or later, so EIP-2718 is supported\n\tif (hardforkIndex >= Object.keys(HardforksOrdered).indexOf('london'))\n\t\treturn !isNullish(tx.gasPrice) ? '0x0' : '0x2';\n\n\t// givenHardfork is Berlin, tx.accessList is undefined, assume type is 0x0\n\tif (hardforkIndex === Object.keys(HardforksOrdered).indexOf('berlin')) return '0x0';\n\n\t// For all pre-Berlin hardforks, return undefined since EIP-2718\n\t// isn't supported\n\treturn undefined;\n};\n\nexport const detectTransactionType = (\n\ttransaction: InternalTransaction,\n\tweb3Context?: Web3Context<EthExecutionAPI>,\n) =>\n\t(web3Context?.transactionTypeParser ?? defaultTransactionTypeParser)(\n\t\ttransaction as unknown as Record<string, unknown>,\n\t);\n\nexport const detectRawTransactionType = (transaction: Uint8Array) =>\n\ttransaction[0] > 0x7f ? '0x0' : toHex(transaction[0]);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}