{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Web3ContractError } from 'web3-errors';\nimport { isNullish, mergeDeep, toHex } from 'web3-utils';\nimport { encodeMethodABI } from './encoding.js';\nexport const getSendTxParams = ({\n  abi,\n  params,\n  options,\n  contractOptions\n}) => {\n  var _a, _b;\n  const deploymentCall = (_b = (_a = options === null || options === void 0 ? void 0 : options.input) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : contractOptions.input;\n  if (!deploymentCall && !(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n    throw new Web3ContractError('Contract address not specified');\n  }\n  if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {\n    throw new Web3ContractError('Contract \"from\" address not specified');\n  }\n  let txParams = mergeDeep({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n    maxFeePerGas: contractOptions.maxFeePerGas\n  }, options);\n  if (!txParams.input || abi.type === 'constructor') {\n    txParams = Object.assign(Object.assign({}, txParams), {\n      input: encodeMethodABI(abi, params, txParams.input)\n    });\n  }\n  return txParams;\n};\nexport const getEthTxCallParams = ({\n  abi,\n  params,\n  options,\n  contractOptions\n}) => {\n  if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n    throw new Web3ContractError('Contract address not specified');\n  }\n  let txParams = mergeDeep({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n    maxFeePerGas: contractOptions.maxFeePerGas\n  }, options);\n  txParams = Object.assign(Object.assign({}, txParams), {\n    input: encodeMethodABI(abi, params, txParams.input ? toHex(txParams.input) : undefined)\n  });\n  return txParams;\n};\nexport const getEstimateGasParams = ({\n  abi,\n  params,\n  options,\n  contractOptions\n}) => {\n  let txParams = mergeDeep({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input\n  }, options);\n  txParams = Object.assign(Object.assign({}, txParams), {\n    input: encodeMethodABI(abi, params, txParams.input ? toHex(txParams.input) : undefined)\n  });\n  return txParams;\n};\nexport const isContractInitOptions = options => typeof options === 'object' && !isNullish(options) && ['input', 'data', 'from', 'gas', 'gasPrice', 'gasLimit', 'address', 'jsonInterface', 'syncWithContext'].some(key => key in options);\nexport const isWeb3ContractContext = options => typeof options === 'object' && !isNullish(options) && !isContractInitOptions(options);\nexport const getCreateAccessListParams = ({\n  abi,\n  params,\n  options,\n  contractOptions\n}) => {\n  if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n    throw new Web3ContractError('Contract address not specified');\n  }\n  if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {\n    throw new Web3ContractError('Contract \"from\" address not specified');\n  }\n  let txParams = mergeDeep({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n    maxFeePerGas: contractOptions.maxFeePerGas\n  }, options);\n  if (!txParams.input || abi.type === 'constructor') {\n    txParams = Object.assign(Object.assign({}, txParams), {\n      input: encodeMethodABI(abi, params, txParams.input)\n    });\n  }\n  return txParams;\n};","map":{"version":3,"names":["Web3ContractError","isNullish","mergeDeep","toHex","encodeMethodABI","getSendTxParams","abi","params","options","contractOptions","deploymentCall","_b","_a","input","data","to","address","from","txParams","gas","gasPrice","maxPriorityFeePerGas","maxFeePerGas","type","Object","assign","getEthTxCallParams","undefined","getEstimateGasParams","isContractInitOptions","some","key","isWeb3ContractContext","getCreateAccessListParams"],"sources":["/Users/branko/Documents/Web3_FE_task/node_modules/web3-eth-contract/src/utils.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3ContractError } from 'web3-errors';\nimport {\n\tTransactionForAccessList,\n\tAbiFunctionFragment,\n\tTransactionWithSenderAPI,\n\tTransactionCall,\n\tHexString,\n\tAddress,\n\tNonPayableCallOptions,\n\tPayableCallOptions,\n\tContractInitOptions,\n} from 'web3-types';\nimport { isNullish, mergeDeep, toHex } from 'web3-utils';\nimport { encodeMethodABI } from './encoding.js';\nimport { ContractOptions, Web3ContractContext } from './types.js';\n\nexport const getSendTxParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment;\n\tparams: unknown[];\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & {\n\t\tinput?: HexString;\n\t\tdata?: HexString;\n\t\tto?: Address;\n\t};\n\tcontractOptions: ContractOptions;\n}): TransactionCall => {\n\tconst deploymentCall = options?.input ?? options?.data ?? contractOptions.input;\n\n\tif (!deploymentCall && !options?.to && !contractOptions.address) {\n\t\tthrow new Web3ContractError('Contract address not specified');\n\t}\n\n\tif (!options?.from && !contractOptions.from) {\n\t\tthrow new Web3ContractError('Contract \"from\" address not specified');\n\t}\n\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t\tmaxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: contractOptions.maxFeePerGas,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionCall;\n\n\tif (!txParams.input || abi.type === 'constructor') {\n\t\ttxParams = {\n\t\t\t...txParams,\n\t\t\tinput: encodeMethodABI(abi, params, txParams.input as HexString),\n\t\t};\n\t}\n\n\treturn txParams;\n};\n\nexport const getEthTxCallParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment;\n\tparams: unknown[];\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & { to?: Address };\n\tcontractOptions: ContractOptions;\n}): TransactionCall => {\n\tif (!options?.to && !contractOptions.address) {\n\t\tthrow new Web3ContractError('Contract address not specified');\n\t}\n\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t\tmaxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: contractOptions.maxFeePerGas,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionCall;\n\n\ttxParams = {\n\t\t...txParams,\n\t\tinput: encodeMethodABI(abi, params, txParams.input ? toHex(txParams.input) : undefined),\n\t};\n\n\treturn txParams;\n};\n\nexport const getEstimateGasParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment;\n\tparams: unknown[];\n\toptions?: PayableCallOptions | NonPayableCallOptions;\n\tcontractOptions: ContractOptions;\n}): Partial<TransactionWithSenderAPI> => {\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionCall;\n\n\ttxParams = {\n\t\t...txParams,\n\t\tinput: encodeMethodABI(abi, params, txParams.input ? toHex(txParams.input) : undefined),\n\t};\n\n\treturn txParams as TransactionWithSenderAPI;\n};\n\nexport const isContractInitOptions = (options: unknown): options is ContractInitOptions =>\n\ttypeof options === 'object' &&\n\t!isNullish(options) &&\n\t[\n\t\t'input',\n\t\t'data',\n\t\t'from',\n\t\t'gas',\n\t\t'gasPrice',\n\t\t'gasLimit',\n\t\t'address',\n\t\t'jsonInterface',\n\t\t'syncWithContext',\n\t].some(key => key in options);\n\nexport const isWeb3ContractContext = (options: unknown): options is Web3ContractContext =>\n\ttypeof options === 'object' && !isNullish(options) && !isContractInitOptions(options);\n\nexport const getCreateAccessListParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment;\n\tparams: unknown[];\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & { to?: Address };\n\tcontractOptions: ContractOptions;\n}): TransactionForAccessList => {\n\tif (!options?.to && !contractOptions.address) {\n\t\tthrow new Web3ContractError('Contract address not specified');\n\t}\n\n\tif (!options?.from && !contractOptions.from) {\n\t\tthrow new Web3ContractError('Contract \"from\" address not specified');\n\t}\n\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t\tmaxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: contractOptions.maxFeePerGas,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionForAccessList;\n\n\tif (!txParams.input || abi.type === 'constructor') {\n\t\ttxParams = {\n\t\t\t...txParams,\n\t\t\tinput: encodeMethodABI(abi, params, txParams.input as HexString),\n\t\t};\n\t}\n\n\treturn txParams;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}