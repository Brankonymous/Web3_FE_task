{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeSignedTransaction = void 0;\nconst web3_utils_1 = require(\"web3-utils\");\nconst web3_eth_accounts_1 = require(\"web3-eth-accounts\");\nconst detect_transaction_type_js_1 = require(\"./detect_transaction_type.js\");\nconst format_transaction_js_1 = require(\"./format_transaction.js\");\n/**\n * Decodes an [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded transaction.\n *\n * @param encodedSignedTransaction The RLP encoded transaction.\n * @param returnFormat ({@link DataFormat} Specifies how the return data should be formatted.\n * @returns {@link SignedTransactionInfoAPI}, an object containing the RLP encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).\n */\nfunction decodeSignedTransaction(encodedSignedTransaction, returnFormat) {\n  return {\n    raw: (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, encodedSignedTransaction, returnFormat),\n    tx: (0, format_transaction_js_1.formatTransaction)(Object.assign(Object.assign({}, web3_eth_accounts_1.TransactionFactory.fromSerializedData((0, web3_utils_1.hexToBytes)(encodedSignedTransaction)).toJSON()), {\n      hash: (0, web3_utils_1.bytesToHex)((0, web3_utils_1.keccak256)((0, web3_utils_1.hexToBytes)(encodedSignedTransaction))),\n      type: (0, detect_transaction_type_js_1.detectRawTransactionType)((0, web3_utils_1.hexToBytes)(encodedSignedTransaction))\n    }), returnFormat)\n  };\n}\nexports.decodeSignedTransaction = decodeSignedTransaction;","map":{"version":3,"names":["web3_utils_1","require","web3_eth_accounts_1","detect_transaction_type_js_1","format_transaction_js_1","decodeSignedTransaction","encodedSignedTransaction","returnFormat","raw","format","tx","formatTransaction","Object","assign","TransactionFactory","fromSerializedData","hexToBytes","toJSON","hash","bytesToHex","keccak256","type","detectRawTransactionType","exports"],"sources":["/Users/branko/Documents/Web3_FE_task/node_modules/web3-eth/src/utils/decode_signed_transaction.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport {\n\tDataFormat,\n\tHexStringBytes,\n\tSignedTransactionInfoAPI,\n\tTransactionSignedAPI,\n} from 'web3-types';\nimport { bytesToHex, format, hexToBytes, keccak256 } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { detectRawTransactionType } from './detect_transaction_type.js';\nimport { formatTransaction } from './format_transaction.js';\n\n/**\n * Decodes an [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded transaction.\n *\n * @param encodedSignedTransaction The RLP encoded transaction.\n * @param returnFormat ({@link DataFormat} Specifies how the return data should be formatted.\n * @returns {@link SignedTransactionInfoAPI}, an object containing the RLP encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).\n */\nexport function decodeSignedTransaction<ReturnFormat extends DataFormat>(\n\tencodedSignedTransaction: HexStringBytes,\n\treturnFormat: ReturnFormat,\n): SignedTransactionInfoAPI {\n\treturn {\n\t\traw: format({ format: 'bytes' }, encodedSignedTransaction, returnFormat),\n\t\ttx: formatTransaction(\n\t\t\t{\n\t\t\t\t...TransactionFactory.fromSerializedData(\n\t\t\t\t\thexToBytes(encodedSignedTransaction),\n\t\t\t\t).toJSON(),\n\t\t\t\thash: bytesToHex(keccak256(hexToBytes(encodedSignedTransaction))),\n\t\t\t\ttype: detectRawTransactionType(hexToBytes(encodedSignedTransaction)),\n\t\t\t} as TransactionSignedAPI,\n\t\t\treturnFormat,\n\t\t),\n\t};\n}\n"],"mappings":";;;;;;AAsBA,MAAAA,YAAA,GAAAC,OAAA;AACA,MAAAC,mBAAA,GAAAD,OAAA;AACA,MAAAE,4BAAA,GAAAF,OAAA;AACA,MAAAG,uBAAA,GAAAH,OAAA;AAEA;;;;;;;AAOA,SAAgBI,uBAAuBA,CACtCC,wBAAwC,EACxCC,YAA0B;EAE1B,OAAO;IACNC,GAAG,EAAE,IAAAR,YAAA,CAAAS,MAAM,EAAC;MAAEA,MAAM,EAAE;IAAO,CAAE,EAAEH,wBAAwB,EAAEC,YAAY,CAAC;IACxEG,EAAE,EAAE,IAAAN,uBAAA,CAAAO,iBAAiB,EACpBC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACIX,mBAAA,CAAAY,kBAAkB,CAACC,kBAAkB,CACvC,IAAAf,YAAA,CAAAgB,UAAU,EAACV,wBAAwB,CAAC,CACpC,CAACW,MAAM,EAAE;MACVC,IAAI,EAAE,IAAAlB,YAAA,CAAAmB,UAAU,EAAC,IAAAnB,YAAA,CAAAoB,SAAS,EAAC,IAAApB,YAAA,CAAAgB,UAAU,EAACV,wBAAwB,CAAC,CAAC,CAAC;MACjEe,IAAI,EAAE,IAAAlB,4BAAA,CAAAmB,wBAAwB,EAAC,IAAAtB,YAAA,CAAAgB,UAAU,EAACV,wBAAwB,CAAC;IAAC,EAC5C,EACzBC,YAAY;GAEb;AACF;AAjBAgB,OAAA,CAAAlB,uBAAA,GAAAA,uBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}