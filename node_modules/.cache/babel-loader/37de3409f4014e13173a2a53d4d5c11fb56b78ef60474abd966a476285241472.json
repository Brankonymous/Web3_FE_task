{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { TransactionPollingTimeoutError } from 'web3-errors';\n// eslint-disable-next-line import/no-cycle\nimport { pollTillDefined, rejectIfTimeout } from 'web3-utils';\n// eslint-disable-next-line import/no-cycle\nimport { rejectIfBlockTimeout } from './reject_if_block_timeout.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionReceipt } from '../rpc_method_wrappers.js';\nexport function waitForTransactionReceipt(web3Context, transactionHash, returnFormat) {\n  var _a;\n  return __awaiter(this, void 0, void 0, function* () {\n    const pollingInterval = (_a = web3Context.transactionReceiptPollingInterval) !== null && _a !== void 0 ? _a : web3Context.transactionPollingInterval;\n    const awaitableTransactionReceipt = pollTillDefined(() => __awaiter(this, void 0, void 0, function* () {\n      try {\n        return getTransactionReceipt(web3Context, transactionHash, returnFormat);\n      } catch (error) {\n        console.warn('An error happen while trying to get the transaction receipt', error);\n        return undefined;\n      }\n    }), pollingInterval);\n    const [timeoutId, rejectOnTimeout] = rejectIfTimeout(web3Context.transactionPollingTimeout, new TransactionPollingTimeoutError({\n      numberOfSeconds: web3Context.transactionPollingTimeout / 1000,\n      transactionHash\n    }));\n    const [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = yield rejectIfBlockTimeout(web3Context, transactionHash);\n    try {\n      // If an error happened here, do not catch it, just clear the resources before raising it to the caller function.\n      return yield Promise.race([awaitableTransactionReceipt, rejectOnTimeout, rejectOnBlockTimeout // this will throw an error on Transaction Block Timeout\n      ]);\n    } finally {\n      clearTimeout(timeoutId);\n      blockTimeoutResourceCleaner.clean();\n    }\n  });\n}","map":{"version":3,"names":["TransactionPollingTimeoutError","pollTillDefined","rejectIfTimeout","rejectIfBlockTimeout","getTransactionReceipt","waitForTransactionReceipt","web3Context","transactionHash","returnFormat","pollingInterval","_a","transactionReceiptPollingInterval","transactionPollingInterval","awaitableTransactionReceipt","__awaiter","error","console","warn","undefined","timeoutId","rejectOnTimeout","transactionPollingTimeout","numberOfSeconds","rejectOnBlockTimeout","blockTimeoutResourceCleaner","Promise","race","clearTimeout","clean"],"sources":["/Users/branko/Documents/Web3_FE_task/node_modules/web3-eth/src/utils/wait_for_transaction_receipt.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3Context } from 'web3-core';\nimport { TransactionPollingTimeoutError } from 'web3-errors';\nimport { EthExecutionAPI, Bytes, TransactionReceipt, DataFormat } from 'web3-types';\n\n// eslint-disable-next-line import/no-cycle\nimport { pollTillDefined, rejectIfTimeout } from 'web3-utils';\n// eslint-disable-next-line import/no-cycle\nimport { rejectIfBlockTimeout } from './reject_if_block_timeout.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionReceipt } from '../rpc_method_wrappers.js';\n\nexport async function waitForTransactionReceipt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n): Promise<TransactionReceipt> {\n\tconst pollingInterval =\n\t\tweb3Context.transactionReceiptPollingInterval ?? web3Context.transactionPollingInterval;\n\n\tconst awaitableTransactionReceipt: Promise<TransactionReceipt> = pollTillDefined(async () => {\n\t\ttry {\n\t\t\treturn getTransactionReceipt(web3Context, transactionHash, returnFormat);\n\t\t} catch (error) {\n\t\t\tconsole.warn('An error happen while trying to get the transaction receipt', error);\n\t\t\treturn undefined;\n\t\t}\n\t}, pollingInterval);\n\n\tconst [timeoutId, rejectOnTimeout]: [NodeJS.Timer, Promise<never>] = rejectIfTimeout(\n\t\tweb3Context.transactionPollingTimeout,\n\t\tnew TransactionPollingTimeoutError({\n\t\t\tnumberOfSeconds: web3Context.transactionPollingTimeout / 1000,\n\t\t\ttransactionHash,\n\t\t}),\n\t);\n\n\tconst [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = await rejectIfBlockTimeout(\n\t\tweb3Context,\n\t\ttransactionHash,\n\t);\n\n\ttry {\n\t\t// If an error happened here, do not catch it, just clear the resources before raising it to the caller function.\n\t\treturn await Promise.race([\n\t\t\tawaitableTransactionReceipt,\n\t\t\trejectOnTimeout, // this will throw an error on Transaction Polling Timeout\n\t\t\trejectOnBlockTimeout, // this will throw an error on Transaction Block Timeout\n\t\t]);\n\t} finally {\n\t\tclearTimeout(timeoutId);\n\t\tblockTimeoutResourceCleaner.clean();\n\t}\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,SAASA,8BAA8B,QAAQ,aAAa;AAG5D;AACA,SAASC,eAAe,EAAEC,eAAe,QAAQ,YAAY;AAC7D;AACA,SAASC,oBAAoB,QAAQ,8BAA8B;AACnE;AACA,SAASC,qBAAqB,QAAQ,2BAA2B;AAEjE,OAAM,SAAgBC,yBAAyBA,CAC9CC,WAAyC,EACzCC,eAAsB,EACtBC,YAA0B;;;IAE1B,MAAMC,eAAe,GACpB,CAAAC,EAAA,GAAAJ,WAAW,CAACK,iCAAiC,cAAAD,EAAA,cAAAA,EAAA,GAAIJ,WAAW,CAACM,0BAA0B;IAExF,MAAMC,2BAA2B,GAAgCZ,eAAe,CAAC,MAAWa,SAAA;MAC3F,IAAI;QACH,OAAOV,qBAAqB,CAACE,WAAW,EAAEC,eAAe,EAAEC,YAAY,CAAC;OACxE,CAAC,OAAOO,KAAK,EAAE;QACfC,OAAO,CAACC,IAAI,CAAC,6DAA6D,EAAEF,KAAK,CAAC;QAClF,OAAOG,SAAS;;IAElB,CAAC,GAAET,eAAe,CAAC;IAEnB,MAAM,CAACU,SAAS,EAAEC,eAAe,CAAC,GAAmClB,eAAe,CACnFI,WAAW,CAACe,yBAAyB,EACrC,IAAIrB,8BAA8B,CAAC;MAClCsB,eAAe,EAAEhB,WAAW,CAACe,yBAAyB,GAAG,IAAI;MAC7Dd;KACA,CAAC,CACF;IAED,MAAM,CAACgB,oBAAoB,EAAEC,2BAA2B,CAAC,GAAG,MAAMrB,oBAAoB,CACrFG,WAAW,EACXC,eAAe,CACf;IAED,IAAI;MACH;MACA,OAAO,MAAMkB,OAAO,CAACC,IAAI,CAAC,CACzBb,2BAA2B,EAC3BO,eAAe,EACfG,oBAAoB,CAAE;MAAA,CACtB,CAAC;KACF,SAAS;MACTI,YAAY,CAACR,SAAS,CAAC;MACvBK,2BAA2B,CAACI,KAAK,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}