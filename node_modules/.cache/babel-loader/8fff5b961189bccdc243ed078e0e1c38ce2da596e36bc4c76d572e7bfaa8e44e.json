{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.prepareTransactionForSigning = void 0;\nconst web3_types_1 = require(\"web3-types\");\nconst web3_utils_1 = require(\"web3-utils\");\nconst web3_eth_accounts_1 = require(\"web3-eth-accounts\");\nconst web3_validator_1 = require(\"web3-validator\");\nconst validation_js_1 = require(\"../validation.js\");\nconst format_transaction_js_1 = require(\"./format_transaction.js\");\nconst transaction_builder_js_1 = require(\"./transaction_builder.js\");\nconst getEthereumjsTxDataFromTransaction = transaction => {\n  var _a;\n  return {\n    nonce: transaction.nonce,\n    gasPrice: transaction.gasPrice,\n    gasLimit: (_a = transaction.gasLimit) !== null && _a !== void 0 ? _a : transaction.gas,\n    to: transaction.to,\n    value: transaction.value,\n    data: transaction.input,\n    type: transaction.type,\n    chainId: transaction.chainId,\n    accessList: transaction.accessList,\n    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n    maxFeePerGas: transaction.maxFeePerGas\n  };\n};\nconst getEthereumjsTransactionOptions = (transaction, web3Context) => {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;\n  const hasTransactionSigningOptions = !(0, web3_validator_1.isNullish)(transaction.chain) && !(0, web3_validator_1.isNullish)(transaction.hardfork) || !(0, web3_validator_1.isNullish)(transaction.common);\n  let common;\n  if (!hasTransactionSigningOptions) {\n    // if defaultcommon is specified, use that.\n    if (web3Context.defaultCommon) {\n      common = web3Context.defaultCommon;\n      if ((0, web3_validator_1.isNullish)(common.hardfork)) common.hardfork = (_a = transaction.hardfork) !== null && _a !== void 0 ? _a : web3Context.defaultHardfork;\n      if ((0, web3_validator_1.isNullish)(common.baseChain)) common.baseChain = web3Context.defaultChain;\n    } else {\n      common = web3_eth_accounts_1.Common.custom({\n        name: 'custom-network',\n        chainId: (0, web3_utils_1.toNumber)(transaction.chainId),\n        networkId: !(0, web3_validator_1.isNullish)(transaction.networkId) ? (0, web3_utils_1.toNumber)(transaction.networkId) : undefined,\n        defaultHardfork: (_b = transaction.hardfork) !== null && _b !== void 0 ? _b : web3Context.defaultHardfork\n      }, {\n        baseChain: web3Context.defaultChain\n      });\n    }\n  } else {\n    const name = (_f = (_e = (_d = (_c = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _c === void 0 ? void 0 : _c.customChain) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : transaction.chain) !== null && _f !== void 0 ? _f : 'custom-network';\n    const chainId = (0, web3_utils_1.toNumber)((_j = (_h = (_g = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _g === void 0 ? void 0 : _g.customChain) === null || _h === void 0 ? void 0 : _h.chainId) !== null && _j !== void 0 ? _j : transaction === null || transaction === void 0 ? void 0 : transaction.chainId);\n    const networkId = (0, web3_utils_1.toNumber)((_m = (_l = (_k = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _k === void 0 ? void 0 : _k.customChain) === null || _l === void 0 ? void 0 : _l.networkId) !== null && _m !== void 0 ? _m : transaction === null || transaction === void 0 ? void 0 : transaction.networkId);\n    const defaultHardfork = (_q = (_p = (_o = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _o === void 0 ? void 0 : _o.hardfork) !== null && _p !== void 0 ? _p : transaction === null || transaction === void 0 ? void 0 : transaction.hardfork) !== null && _q !== void 0 ? _q : web3Context.defaultHardfork;\n    const baseChain = (_t = (_s = (_r = transaction.common) === null || _r === void 0 ? void 0 : _r.baseChain) !== null && _s !== void 0 ? _s : transaction.chain) !== null && _t !== void 0 ? _t : web3Context.defaultChain;\n    if (chainId && networkId && name) {\n      common = web3_eth_accounts_1.Common.custom({\n        name,\n        chainId,\n        networkId,\n        defaultHardfork\n      }, {\n        baseChain\n      });\n    }\n  }\n  return {\n    common\n  };\n};\nconst prepareTransactionForSigning = (transaction, web3Context, privateKey, fillGasPrice = false) => __awaiter(void 0, void 0, void 0, function* () {\n  const populatedTransaction = yield (0, transaction_builder_js_1.transactionBuilder)({\n    transaction,\n    web3Context,\n    privateKey,\n    fillGasPrice\n  });\n  const formattedTransaction = (0, format_transaction_js_1.formatTransaction)(populatedTransaction, web3_types_1.ETH_DATA_FORMAT);\n  (0, validation_js_1.validateTransactionForSigning)(formattedTransaction);\n  return web3_eth_accounts_1.TransactionFactory.fromTxData(getEthereumjsTxDataFromTransaction(formattedTransaction), getEthereumjsTransactionOptions(formattedTransaction, web3Context));\n});\nexports.prepareTransactionForSigning = prepareTransactionForSigning;","map":{"version":3,"names":["web3_types_1","require","web3_utils_1","web3_eth_accounts_1","web3_validator_1","validation_js_1","format_transaction_js_1","transaction_builder_js_1","getEthereumjsTxDataFromTransaction","transaction","nonce","gasPrice","gasLimit","_a","gas","to","value","data","input","type","chainId","accessList","maxPriorityFeePerGas","maxFeePerGas","getEthereumjsTransactionOptions","web3Context","hasTransactionSigningOptions","isNullish","chain","hardfork","common","defaultCommon","defaultHardfork","baseChain","defaultChain","Common","custom","name","toNumber","networkId","undefined","_b","_f","_e","_d","_c","customChain","_j","_h","_g","_m","_l","_k","_q","_p","_o","_t","_s","_r","prepareTransactionForSigning","privateKey","fillGasPrice","__awaiter","populatedTransaction","transactionBuilder","formattedTransaction","formatTransaction","ETH_DATA_FORMAT","validateTransactionForSigning","TransactionFactory","fromTxData","exports"],"sources":["/Users/branko/Documents/Web3_FE_task/node_modules/web3-eth/src/utils/prepare_transaction_for_signing.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tEthExecutionAPI,\n\tHexString,\n\tPopulatedUnsignedEip1559Transaction,\n\tPopulatedUnsignedEip2930Transaction,\n\tPopulatedUnsignedTransaction,\n\tTransaction,\n\tValidChains,\n\tFormatType,\n\tETH_DATA_FORMAT,\n} from 'web3-types';\nimport { Web3Context } from 'web3-core';\nimport { toNumber } from 'web3-utils';\nimport { TransactionFactory, TxOptions, Common } from 'web3-eth-accounts';\nimport { isNullish } from 'web3-validator';\nimport { validateTransactionForSigning } from '../validation.js';\nimport { formatTransaction } from './format_transaction.js';\nimport { transactionBuilder } from './transaction_builder.js';\n\nconst getEthereumjsTxDataFromTransaction = (\n\ttransaction: FormatType<PopulatedUnsignedTransaction, typeof ETH_DATA_FORMAT>,\n) => ({\n\tnonce: transaction.nonce,\n\tgasPrice: transaction.gasPrice,\n\tgasLimit: transaction.gasLimit ?? transaction.gas,\n\tto: transaction.to,\n\tvalue: transaction.value,\n\tdata: transaction.input,\n\ttype: transaction.type,\n\tchainId: transaction.chainId,\n\taccessList: (\n\t\ttransaction as FormatType<PopulatedUnsignedEip2930Transaction, typeof ETH_DATA_FORMAT>\n\t).accessList,\n\tmaxPriorityFeePerGas: (\n\t\ttransaction as FormatType<PopulatedUnsignedEip1559Transaction, typeof ETH_DATA_FORMAT>\n\t).maxPriorityFeePerGas,\n\tmaxFeePerGas: (\n\t\ttransaction as FormatType<PopulatedUnsignedEip1559Transaction, typeof ETH_DATA_FORMAT>\n\t).maxFeePerGas,\n});\n\nconst getEthereumjsTransactionOptions = (\n\ttransaction: FormatType<PopulatedUnsignedTransaction, typeof ETH_DATA_FORMAT>,\n\tweb3Context: Web3Context<EthExecutionAPI>,\n) => {\n\tconst hasTransactionSigningOptions =\n\t\t(!isNullish(transaction.chain) && !isNullish(transaction.hardfork)) ||\n\t\t!isNullish(transaction.common);\n\n\tlet common;\n\tif (!hasTransactionSigningOptions) {\n\t\t// if defaultcommon is specified, use that.\n\t\tif (web3Context.defaultCommon) {\n\t\t\tcommon = web3Context.defaultCommon;\n\n\t\t\tif (isNullish(common.hardfork))\n\t\t\t\tcommon.hardfork = transaction.hardfork ?? web3Context.defaultHardfork;\n\t\t\tif (isNullish(common.baseChain))\n\t\t\t\tcommon.baseChain = web3Context.defaultChain as ValidChains;\n\t\t} else {\n\t\t\tcommon = Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: 'custom-network',\n\t\t\t\t\tchainId: toNumber(transaction.chainId) as number,\n\t\t\t\t\tnetworkId: !isNullish(transaction.networkId)\n\t\t\t\t\t\t? (toNumber(transaction.networkId) as number)\n\t\t\t\t\t\t: undefined,\n\t\t\t\t\tdefaultHardfork: transaction.hardfork ?? web3Context.defaultHardfork,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tbaseChain: web3Context.defaultChain,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t} else {\n\t\tconst name =\n\t\t\ttransaction?.common?.customChain?.name ?? transaction.chain ?? 'custom-network';\n\t\tconst chainId = toNumber(\n\t\t\ttransaction?.common?.customChain?.chainId ?? transaction?.chainId,\n\t\t) as number;\n\t\tconst networkId = toNumber(\n\t\t\ttransaction?.common?.customChain?.networkId ?? transaction?.networkId,\n\t\t) as number;\n\t\tconst defaultHardfork =\n\t\t\ttransaction?.common?.hardfork ?? transaction?.hardfork ?? web3Context.defaultHardfork;\n\t\tconst baseChain =\n\t\t\ttransaction.common?.baseChain ?? transaction.chain ?? web3Context.defaultChain;\n\n\t\tif (chainId && networkId && name) {\n\t\t\tcommon = Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t\tchainId,\n\t\t\t\t\tnetworkId,\n\t\t\t\t\tdefaultHardfork,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tbaseChain,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t}\n\treturn { common } as TxOptions;\n};\n\nexport const prepareTransactionForSigning = async (\n\ttransaction: Transaction,\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tprivateKey?: HexString | Uint8Array,\n\tfillGasPrice = false,\n) => {\n\tconst populatedTransaction = (await transactionBuilder({\n\t\ttransaction,\n\t\tweb3Context,\n\t\tprivateKey,\n\t\tfillGasPrice,\n\t})) as unknown as PopulatedUnsignedTransaction;\n\n\tconst formattedTransaction = formatTransaction(\n\t\tpopulatedTransaction,\n\t\tETH_DATA_FORMAT,\n\t) as unknown as FormatType<PopulatedUnsignedTransaction, typeof ETH_DATA_FORMAT>;\n\n\tvalidateTransactionForSigning(\n\t\tformattedTransaction as unknown as FormatType<Transaction, typeof ETH_DATA_FORMAT>,\n\t);\n\n\treturn TransactionFactory.fromTxData(\n\t\tgetEthereumjsTxDataFromTransaction(formattedTransaction),\n\t\tgetEthereumjsTransactionOptions(formattedTransaction, web3Context),\n\t);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}