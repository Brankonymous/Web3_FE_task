{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCreateAccessListParams = exports.isWeb3ContractContext = exports.isContractInitOptions = exports.getEstimateGasParams = exports.getEthTxCallParams = exports.getSendTxParams = void 0;\nconst web3_errors_1 = require(\"web3-errors\");\nconst web3_utils_1 = require(\"web3-utils\");\nconst encoding_js_1 = require(\"./encoding.js\");\nconst getSendTxParams = ({\n  abi,\n  params,\n  options,\n  contractOptions\n}) => {\n  var _a, _b;\n  const deploymentCall = (_b = (_a = options === null || options === void 0 ? void 0 : options.input) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : contractOptions.input;\n  if (!deploymentCall && !(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n    throw new web3_errors_1.Web3ContractError('Contract address not specified');\n  }\n  if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {\n    throw new web3_errors_1.Web3ContractError('Contract \"from\" address not specified');\n  }\n  let txParams = (0, web3_utils_1.mergeDeep)({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n    maxFeePerGas: contractOptions.maxFeePerGas\n  }, options);\n  if (!txParams.input || abi.type === 'constructor') {\n    txParams = Object.assign(Object.assign({}, txParams), {\n      input: (0, encoding_js_1.encodeMethodABI)(abi, params, txParams.input)\n    });\n  }\n  return txParams;\n};\nexports.getSendTxParams = getSendTxParams;\nconst getEthTxCallParams = ({\n  abi,\n  params,\n  options,\n  contractOptions\n}) => {\n  if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n    throw new web3_errors_1.Web3ContractError('Contract address not specified');\n  }\n  let txParams = (0, web3_utils_1.mergeDeep)({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n    maxFeePerGas: contractOptions.maxFeePerGas\n  }, options);\n  txParams = Object.assign(Object.assign({}, txParams), {\n    input: (0, encoding_js_1.encodeMethodABI)(abi, params, txParams.input ? (0, web3_utils_1.toHex)(txParams.input) : undefined)\n  });\n  return txParams;\n};\nexports.getEthTxCallParams = getEthTxCallParams;\nconst getEstimateGasParams = ({\n  abi,\n  params,\n  options,\n  contractOptions\n}) => {\n  let txParams = (0, web3_utils_1.mergeDeep)({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input\n  }, options);\n  txParams = Object.assign(Object.assign({}, txParams), {\n    input: (0, encoding_js_1.encodeMethodABI)(abi, params, txParams.input ? (0, web3_utils_1.toHex)(txParams.input) : undefined)\n  });\n  return txParams;\n};\nexports.getEstimateGasParams = getEstimateGasParams;\nconst isContractInitOptions = options => typeof options === 'object' && !(0, web3_utils_1.isNullish)(options) && ['input', 'data', 'from', 'gas', 'gasPrice', 'gasLimit', 'address', 'jsonInterface', 'syncWithContext'].some(key => key in options);\nexports.isContractInitOptions = isContractInitOptions;\nconst isWeb3ContractContext = options => typeof options === 'object' && !(0, web3_utils_1.isNullish)(options) && !(0, exports.isContractInitOptions)(options);\nexports.isWeb3ContractContext = isWeb3ContractContext;\nconst getCreateAccessListParams = ({\n  abi,\n  params,\n  options,\n  contractOptions\n}) => {\n  if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n    throw new web3_errors_1.Web3ContractError('Contract address not specified');\n  }\n  if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {\n    throw new web3_errors_1.Web3ContractError('Contract \"from\" address not specified');\n  }\n  let txParams = (0, web3_utils_1.mergeDeep)({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n    maxFeePerGas: contractOptions.maxFeePerGas\n  }, options);\n  if (!txParams.input || abi.type === 'constructor') {\n    txParams = Object.assign(Object.assign({}, txParams), {\n      input: (0, encoding_js_1.encodeMethodABI)(abi, params, txParams.input)\n    });\n  }\n  return txParams;\n};\nexports.getCreateAccessListParams = getCreateAccessListParams;","map":{"version":3,"names":["web3_errors_1","require","web3_utils_1","encoding_js_1","getSendTxParams","abi","params","options","contractOptions","deploymentCall","_b","_a","input","data","to","address","Web3ContractError","from","txParams","mergeDeep","gas","gasPrice","maxPriorityFeePerGas","maxFeePerGas","type","Object","assign","encodeMethodABI","exports","getEthTxCallParams","toHex","undefined","getEstimateGasParams","isContractInitOptions","isNullish","some","key","isWeb3ContractContext","getCreateAccessListParams"],"sources":["/Users/branko/Documents/Web3_FE_task/node_modules/web3-eth-contract/src/utils.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3ContractError } from 'web3-errors';\nimport {\n\tTransactionForAccessList,\n\tAbiFunctionFragment,\n\tTransactionWithSenderAPI,\n\tTransactionCall,\n\tHexString,\n\tAddress,\n\tNonPayableCallOptions,\n\tPayableCallOptions,\n\tContractInitOptions,\n} from 'web3-types';\nimport { isNullish, mergeDeep, toHex } from 'web3-utils';\nimport { encodeMethodABI } from './encoding.js';\nimport { ContractOptions, Web3ContractContext } from './types.js';\n\nexport const getSendTxParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment;\n\tparams: unknown[];\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & {\n\t\tinput?: HexString;\n\t\tdata?: HexString;\n\t\tto?: Address;\n\t};\n\tcontractOptions: ContractOptions;\n}): TransactionCall => {\n\tconst deploymentCall = options?.input ?? options?.data ?? contractOptions.input;\n\n\tif (!deploymentCall && !options?.to && !contractOptions.address) {\n\t\tthrow new Web3ContractError('Contract address not specified');\n\t}\n\n\tif (!options?.from && !contractOptions.from) {\n\t\tthrow new Web3ContractError('Contract \"from\" address not specified');\n\t}\n\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t\tmaxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: contractOptions.maxFeePerGas,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionCall;\n\n\tif (!txParams.input || abi.type === 'constructor') {\n\t\ttxParams = {\n\t\t\t...txParams,\n\t\t\tinput: encodeMethodABI(abi, params, txParams.input as HexString),\n\t\t};\n\t}\n\n\treturn txParams;\n};\n\nexport const getEthTxCallParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment;\n\tparams: unknown[];\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & { to?: Address };\n\tcontractOptions: ContractOptions;\n}): TransactionCall => {\n\tif (!options?.to && !contractOptions.address) {\n\t\tthrow new Web3ContractError('Contract address not specified');\n\t}\n\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t\tmaxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: contractOptions.maxFeePerGas,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionCall;\n\n\ttxParams = {\n\t\t...txParams,\n\t\tinput: encodeMethodABI(abi, params, txParams.input ? toHex(txParams.input) : undefined),\n\t};\n\n\treturn txParams;\n};\n\nexport const getEstimateGasParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment;\n\tparams: unknown[];\n\toptions?: PayableCallOptions | NonPayableCallOptions;\n\tcontractOptions: ContractOptions;\n}): Partial<TransactionWithSenderAPI> => {\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionCall;\n\n\ttxParams = {\n\t\t...txParams,\n\t\tinput: encodeMethodABI(abi, params, txParams.input ? toHex(txParams.input) : undefined),\n\t};\n\n\treturn txParams as TransactionWithSenderAPI;\n};\n\nexport const isContractInitOptions = (options: unknown): options is ContractInitOptions =>\n\ttypeof options === 'object' &&\n\t!isNullish(options) &&\n\t[\n\t\t'input',\n\t\t'data',\n\t\t'from',\n\t\t'gas',\n\t\t'gasPrice',\n\t\t'gasLimit',\n\t\t'address',\n\t\t'jsonInterface',\n\t\t'syncWithContext',\n\t].some(key => key in options);\n\nexport const isWeb3ContractContext = (options: unknown): options is Web3ContractContext =>\n\ttypeof options === 'object' && !isNullish(options) && !isContractInitOptions(options);\n\nexport const getCreateAccessListParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment;\n\tparams: unknown[];\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & { to?: Address };\n\tcontractOptions: ContractOptions;\n}): TransactionForAccessList => {\n\tif (!options?.to && !contractOptions.address) {\n\t\tthrow new Web3ContractError('Contract address not specified');\n\t}\n\n\tif (!options?.from && !contractOptions.from) {\n\t\tthrow new Web3ContractError('Contract \"from\" address not specified');\n\t}\n\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t\tmaxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: contractOptions.maxFeePerGas,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionForAccessList;\n\n\tif (!txParams.input || abi.type === 'constructor') {\n\t\ttxParams = {\n\t\t\t...txParams,\n\t\t\tinput: encodeMethodABI(abi, params, txParams.input as HexString),\n\t\t};\n\t}\n\n\treturn txParams;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}