{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionFactory = void 0;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nconst utils_js_1 = require(\"../common/utils.js\");\nconst eip1559Transaction_js_1 = require(\"./eip1559Transaction.js\");\nconst eip2930Transaction_js_1 = require(\"./eip2930Transaction.js\");\nconst legacyTransaction_js_1 = require(\"./legacyTransaction.js\");\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nclass TransactionFactory {\n  // It is not possible to instantiate a TransactionFactory object.\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, no-useless-constructor\n  constructor() {}\n  /**\n   * Create a transaction from a `txData` object\n   *\n   * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n   * @param txOptions - Options to pass on to the constructor of the transaction\n   */\n  static fromTxData(txData, txOptions = {}) {\n    if (!('type' in txData) || txData.type === undefined) {\n      // Assume legacy transaction\n      return legacyTransaction_js_1.Transaction.fromTxData(txData, txOptions);\n    }\n    const txType = Number((0, utils_js_1.uint8ArrayToBigInt)((0, utils_js_1.toUint8Array)(txData.type)));\n    if (txType === 0) {\n      return legacyTransaction_js_1.Transaction.fromTxData(txData, txOptions);\n    }\n    if (txType === 1) {\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n      return eip2930Transaction_js_1.AccessListEIP2930Transaction.fromTxData(\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n      txData, txOptions);\n    }\n    if (txType === 2) {\n      return eip1559Transaction_js_1.FeeMarketEIP1559Transaction.fromTxData(\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n      txData, txOptions);\n    }\n    throw new Error(`Tx instantiation with type ${txType} not supported`);\n  }\n  /**\n   * This method tries to decode serialized data.\n   *\n   * @param data - The data Uint8Array\n   * @param txOptions - The transaction options\n   */\n  static fromSerializedData(data, txOptions = {}) {\n    if (data[0] <= 0x7f) {\n      // Determine the type.\n      switch (data[0]) {\n        case 1:\n          return eip2930Transaction_js_1.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n        case 2:\n          return eip1559Transaction_js_1.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n        default:\n          throw new Error(`TypedTransaction with ID ${data[0]} unknown`);\n      }\n    } else {\n      return legacyTransaction_js_1.Transaction.fromSerializedTx(data, txOptions);\n    }\n  }\n  /**\n   * When decoding a BlockBody, in the transactions field, a field is either:\n   * A Uint8Array (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n   * A Uint8Array[] (Legacy Transaction)\n   * This method returns the right transaction.\n   *\n   * @param data - A Uint8Array or Uint8Array[]\n   * @param txOptions - The transaction options\n   */\n  static fromBlockBodyData(data, txOptions = {}) {\n    if (data instanceof Uint8Array) {\n      return this.fromSerializedData(data, txOptions);\n    }\n    if (Array.isArray(data)) {\n      // It is a legacy transaction\n      return legacyTransaction_js_1.Transaction.fromValuesArray(data, txOptions);\n    }\n    throw new Error('Cannot decode transaction: unknown type input');\n  }\n}\nexports.TransactionFactory = TransactionFactory;","map":{"version":3,"names":["utils_js_1","require","eip1559Transaction_js_1","eip2930Transaction_js_1","legacyTransaction_js_1","TransactionFactory","constructor","fromTxData","txData","txOptions","type","undefined","Transaction","txType","Number","uint8ArrayToBigInt","toUint8Array","AccessListEIP2930Transaction","FeeMarketEIP1559Transaction","Error","fromSerializedData","data","fromSerializedTx","fromBlockBodyData","Uint8Array","Array","isArray","fromValuesArray","exports"],"sources":["/Users/branko/Documents/Web3_FE_task/node_modules/web3-eth-accounts/src/tx/transactionFactory.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { toUint8Array, uint8ArrayToBigInt } from '../common/utils.js';\nimport { FeeMarketEIP1559Transaction } from './eip1559Transaction.js';\nimport { AccessListEIP2930Transaction } from './eip2930Transaction.js';\nimport { Transaction } from './legacyTransaction.js';\nimport type { TypedTransaction } from '../types.js';\n\nimport type {\n\tAccessListEIP2930TxData,\n\tFeeMarketEIP1559TxData,\n\tTxData,\n\tTxOptions,\n} from './types.js';\n\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport class TransactionFactory {\n\t// It is not possible to instantiate a TransactionFactory object.\n\t// eslint-disable-next-line @typescript-eslint/no-empty-function, no-useless-constructor\n\tprivate constructor() {}\n\n\t/**\n\t * Create a transaction from a `txData` object\n\t *\n\t * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n\t * @param txOptions - Options to pass on to the constructor of the transaction\n\t */\n\tpublic static fromTxData(\n\t\ttxData: TxData | TypedTransaction,\n\t\ttxOptions: TxOptions = {},\n\t): TypedTransaction {\n\t\tif (!('type' in txData) || txData.type === undefined) {\n\t\t\t// Assume legacy transaction\n\t\t\treturn Transaction.fromTxData(txData as TxData, txOptions);\n\t\t}\n\t\tconst txType = Number(uint8ArrayToBigInt(toUint8Array(txData.type)));\n\t\tif (txType === 0) {\n\t\t\treturn Transaction.fromTxData(txData as TxData, txOptions);\n\t\t}\n\t\tif (txType === 1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\t\treturn AccessListEIP2930Transaction.fromTxData(\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\t\t\t<AccessListEIP2930TxData>txData,\n\t\t\t\ttxOptions,\n\t\t\t);\n\t\t}\n\t\tif (txType === 2) {\n\t\t\treturn FeeMarketEIP1559Transaction.fromTxData(\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\t\t\t<FeeMarketEIP1559TxData>txData,\n\t\t\t\ttxOptions,\n\t\t\t);\n\t\t}\n\t\tthrow new Error(`Tx instantiation with type ${txType} not supported`);\n\t}\n\n\t/**\n\t * This method tries to decode serialized data.\n\t *\n\t * @param data - The data Uint8Array\n\t * @param txOptions - The transaction options\n\t */\n\tpublic static fromSerializedData(\n\t\tdata: Uint8Array,\n\t\ttxOptions: TxOptions = {},\n\t): TypedTransaction {\n\t\tif (data[0] <= 0x7f) {\n\t\t\t// Determine the type.\n\t\t\tswitch (data[0]) {\n\t\t\t\tcase 1:\n\t\t\t\t\treturn AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n\t\t\t\tcase 2:\n\t\t\t\t\treturn FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`TypedTransaction with ID ${data[0]} unknown`);\n\t\t\t}\n\t\t} else {\n\t\t\treturn Transaction.fromSerializedTx(data, txOptions);\n\t\t}\n\t}\n\n\t/**\n\t * When decoding a BlockBody, in the transactions field, a field is either:\n\t * A Uint8Array (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n\t * A Uint8Array[] (Legacy Transaction)\n\t * This method returns the right transaction.\n\t *\n\t * @param data - A Uint8Array or Uint8Array[]\n\t * @param txOptions - The transaction options\n\t */\n\tpublic static fromBlockBodyData(data: Uint8Array | Uint8Array[], txOptions: TxOptions = {}) {\n\t\tif (data instanceof Uint8Array) {\n\t\t\treturn this.fromSerializedData(data, txOptions);\n\t\t}\n\t\tif (Array.isArray(data)) {\n\t\t\t// It is a legacy transaction\n\t\t\treturn Transaction.fromValuesArray(data, txOptions);\n\t\t}\n\t\tthrow new Error('Cannot decode transaction: unknown type input');\n\t}\n}\n"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;AAgBA,MAAAA,UAAA,GAAAC,OAAA;AACA,MAAAC,uBAAA,GAAAD,OAAA;AACA,MAAAE,uBAAA,GAAAF,OAAA;AACA,MAAAG,sBAAA,GAAAH,OAAA;AAUA;AACA,MAAaI,kBAAkB;EAC9B;EACA;EACAC,YAAA,GAAuB;EAEvB;;;;;;EAMO,OAAOC,UAAUA,CACvBC,MAAiC,EACjCC,SAAA,GAAuB,EAAE;IAEzB,IAAI,EAAE,MAAM,IAAID,MAAM,CAAC,IAAIA,MAAM,CAACE,IAAI,KAAKC,SAAS,EAAE;MACrD;MACA,OAAOP,sBAAA,CAAAQ,WAAW,CAACL,UAAU,CAACC,MAAgB,EAAEC,SAAS,CAAC;;IAE3D,MAAMI,MAAM,GAAGC,MAAM,CAAC,IAAAd,UAAA,CAAAe,kBAAkB,EAAC,IAAAf,UAAA,CAAAgB,YAAY,EAACR,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;IACpE,IAAIG,MAAM,KAAK,CAAC,EAAE;MACjB,OAAOT,sBAAA,CAAAQ,WAAW,CAACL,UAAU,CAACC,MAAgB,EAAEC,SAAS,CAAC;;IAE3D,IAAII,MAAM,KAAK,CAAC,EAAE;MACjB;MACA,OAAOV,uBAAA,CAAAc,4BAA4B,CAACV,UAAU;MAC7C;MACyBC,MAAM,EAC/BC,SAAS,CACT;;IAEF,IAAII,MAAM,KAAK,CAAC,EAAE;MACjB,OAAOX,uBAAA,CAAAgB,2BAA2B,CAACX,UAAU;MAC5C;MACwBC,MAAM,EAC9BC,SAAS,CACT;;IAEF,MAAM,IAAIU,KAAK,CAAC,8BAA8BN,MAAM,gBAAgB,CAAC;EACtE;EAEA;;;;;;EAMO,OAAOO,kBAAkBA,CAC/BC,IAAgB,EAChBZ,SAAA,GAAuB,EAAE;IAEzB,IAAIY,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;MACpB;MACA,QAAQA,IAAI,CAAC,CAAC,CAAC;QACd,KAAK,CAAC;UACL,OAAOlB,uBAAA,CAAAc,4BAA4B,CAACK,gBAAgB,CAACD,IAAI,EAAEZ,SAAS,CAAC;QACtE,KAAK,CAAC;UACL,OAAOP,uBAAA,CAAAgB,2BAA2B,CAACI,gBAAgB,CAACD,IAAI,EAAEZ,SAAS,CAAC;QACrE;UACC,MAAM,IAAIU,KAAK,CAAC,4BAA4BE,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC;;KAEhE,MAAM;MACN,OAAOjB,sBAAA,CAAAQ,WAAW,CAACU,gBAAgB,CAACD,IAAI,EAAEZ,SAAS,CAAC;;EAEtD;EAEA;;;;;;;;;EASO,OAAOc,iBAAiBA,CAACF,IAA+B,EAAEZ,SAAA,GAAuB,EAAE;IACzF,IAAIY,IAAI,YAAYG,UAAU,EAAE;MAC/B,OAAO,IAAI,CAACJ,kBAAkB,CAACC,IAAI,EAAEZ,SAAS,CAAC;;IAEhD,IAAIgB,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,EAAE;MACxB;MACA,OAAOjB,sBAAA,CAAAQ,WAAW,CAACe,eAAe,CAACN,IAAI,EAAEZ,SAAS,CAAC;;IAEpD,MAAM,IAAIU,KAAK,CAAC,+CAA+C,CAAC;EACjE;;AApFDS,OAAA,CAAAvB,kBAAA,GAAAA,kBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}