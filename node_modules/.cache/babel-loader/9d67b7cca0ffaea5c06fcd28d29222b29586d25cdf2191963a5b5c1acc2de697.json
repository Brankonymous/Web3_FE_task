{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateObject = exports.createHmacDrbg = exports.bitMask = exports.bitSet = exports.bitGet = exports.bitLen = exports.utf8ToBytes = exports.equalBytes = exports.concatBytes = exports.ensureBytes = exports.numberToVarBytesBE = exports.numberToBytesLE = exports.numberToBytesBE = exports.bytesToNumberLE = exports.bytesToNumberBE = exports.hexToBytes = exports.hexToNumber = exports.numberToHexUnpadded = exports.bytesToHex = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = a => a instanceof Uint8Array;\nconst hexes = Array.from({\n  length: 256\n}, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\nexports.bytesToHex = bytesToHex;\nfunction numberToHexUnpadded(num) {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\nexports.numberToHexUnpadded = numberToHexUnpadded;\nfunction hexToNumber(hex) {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\nexports.hexToNumber = hexToNumber;\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\nexports.hexToBytes = hexToBytes;\n// BE: Big Endian, LE: Little Endian\nfunction bytesToNumberBE(bytes) {\n  return hexToNumber(bytesToHex(bytes));\n}\nexports.bytesToNumberBE = bytesToNumberBE;\nfunction bytesToNumberLE(bytes) {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexports.bytesToNumberLE = bytesToNumberLE;\nfunction numberToBytesBE(n, len) {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexports.numberToBytesBE = numberToBytesBE;\nfunction numberToBytesLE(n, len) {\n  return numberToBytesBE(n, len).reverse();\n}\nexports.numberToBytesLE = numberToBytesLE;\n// Unpadded, rarely used\nfunction numberToVarBytesBE(n) {\n  return hexToBytes(numberToHexUnpadded(n));\n}\nexports.numberToVarBytesBE = numberToVarBytesBE;\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nfunction ensureBytes(title, hex, expectedLength) {\n  let res;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (u8a(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength) throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\nexports.ensureBytes = ensureBytes;\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach(a => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\nexports.concatBytes = concatBytes;\nfunction equalBytes(b1, b2) {\n  // We don't care about timing attacks here\n  if (b1.length !== b2.length) return false;\n  for (let i = 0; i < b1.length; i++) if (b1[i] !== b2[i]) return false;\n  return true;\n}\nexports.equalBytes = equalBytes;\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexports.utf8ToBytes = utf8ToBytes;\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nfunction bitLen(n) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\nexports.bitLen = bitLen;\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nfunction bitGet(n, pos) {\n  return n >> BigInt(pos) & _1n;\n}\nexports.bitGet = bitGet;\n/**\n * Sets single bit at position.\n */\nconst bitSet = (n, pos, value) => {\n  return n | (value ? _1n : _0n) << BigInt(pos);\n};\nexports.bitSet = bitSet;\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nconst bitMask = n => (_2n << BigInt(n - 1)) - _1n;\nexports.bitMask = bitMask;\n// DRBG\nconst u8n = data => new Uint8Array(data); // creates Uint8Array\nconst u8fr = arr => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nfunction createHmacDrbg(hashLen, qByteLen, hmacFn) {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed, pred) => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\nexports.createHmacDrbg = createHmacDrbg;\n// Validating curves and fields\nconst validatorFns = {\n  bigint: val => typeof val === 'bigint',\n  function: val => typeof val === 'function',\n  boolean: val => typeof val === 'boolean',\n  string: val => typeof val === 'string',\n  isSafeInteger: val => Number.isSafeInteger(val),\n  array: val => Array.isArray(val),\n  field: (val, object) => object.Fp.isValid(val),\n  hash: val => typeof val === 'function' && Number.isSafeInteger(val.outputLen)\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nfunction validateObject(object, validators, optValidators = {}) {\n  const checkField = (fieldName, type, isOptional) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function') throw new Error(`Invalid validator \"${type}\", expected function`);\n    const val = object[fieldName];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type, true);\n  return object;\n}\nexports.validateObject = validateObject;\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });","map":{"version":3,"names":["_0n","BigInt","_1n","_2n","u8a","a","Uint8Array","hexes","Array","from","length","v","i","toString","padStart","bytesToHex","bytes","Error","hex","exports","numberToHexUnpadded","num","hexToNumber","hexToBytes","len","array","j","hexByte","slice","byte","Number","parseInt","isNaN","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","n","numberToBytesLE","numberToVarBytesBE","ensureBytes","title","expectedLength","res","e","concatBytes","arrays","r","reduce","sum","pad","forEach","set","equalBytes","b1","b2","utf8ToBytes","str","TextEncoder","encode","bitLen","bitGet","pos","bitSet","value","bitMask","u8n","data","u8fr","arr","createHmacDrbg","hashLen","qByteLen","hmacFn","k","reset","fill","h","b","reseed","seed","gen","out","sl","push","genUntil","pred","undefined","validatorFns","bigint","val","function","boolean","string","isSafeInteger","isArray","field","object","Fp","isValid","hash","outputLen","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","String","Object","entries"],"sources":["/Users/branko/Documents/Web3_FE_task/node_modules/@noble/curves/src/abstract/utils.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (u8a(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\nexport function equalBytes(b1: Uint8Array, b2: Uint8Array) {\n  // We don't care about timing attacks here\n  if (b1.length !== b2.length) return false;\n  for (let i = 0; i < b1.length; i++) if (b1[i] !== b2[i]) return false;\n  return true;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number) {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport const bitSet = (n: bigint, pos: number, value: boolean) => {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n};\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}