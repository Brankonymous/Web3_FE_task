{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.jsonInterfaceMethodToString = exports.flattenTypes = exports.modifyParams = exports.formatParam = exports.formatOddHexstrings = exports.isOddHexstring = exports.mapTypes = exports.mapStructToCoderFormat = exports.mapStructNameAndType = exports.isSimplifiedStructFormat = exports.isAbiConstructorFragment = exports.isAbiFunctionFragment = exports.isAbiEventFragment = exports.isAbiErrorFragment = exports.isAbiFragment = void 0;\nconst web3_errors_1 = require(\"web3-errors\");\nconst abi_1 = require(\"@ethersproject/abi\");\nconst web3_utils_1 = require(\"web3-utils\");\nconst ethers_abi_coder_js_1 = __importDefault(require(\"./ethers_abi_coder.js\"));\nconst isAbiFragment = item => !(0, web3_utils_1.isNullish)(item) && typeof item === 'object' && !(0, web3_utils_1.isNullish)(item.type) && ['function', 'event', 'constructor', 'error'].includes(item.type);\nexports.isAbiFragment = isAbiFragment;\nconst isAbiErrorFragment = item => !(0, web3_utils_1.isNullish)(item) && typeof item === 'object' && !(0, web3_utils_1.isNullish)(item.type) && item.type === 'error';\nexports.isAbiErrorFragment = isAbiErrorFragment;\nconst isAbiEventFragment = item => !(0, web3_utils_1.isNullish)(item) && typeof item === 'object' && !(0, web3_utils_1.isNullish)(item.type) && item.type === 'event';\nexports.isAbiEventFragment = isAbiEventFragment;\nconst isAbiFunctionFragment = item => !(0, web3_utils_1.isNullish)(item) && typeof item === 'object' && !(0, web3_utils_1.isNullish)(item.type) && item.type === 'function';\nexports.isAbiFunctionFragment = isAbiFunctionFragment;\nconst isAbiConstructorFragment = item => !(0, web3_utils_1.isNullish)(item) && typeof item === 'object' && !(0, web3_utils_1.isNullish)(item.type) && item.type === 'constructor';\nexports.isAbiConstructorFragment = isAbiConstructorFragment;\n/**\n * Check if type is simplified struct format\n */\nconst isSimplifiedStructFormat = type => typeof type === 'object' && typeof type.components === 'undefined' && typeof type.name === 'undefined';\nexports.isSimplifiedStructFormat = isSimplifiedStructFormat;\n/**\n * Maps the correct tuple type and name when the simplified format in encode/decodeParameter is used\n */\nconst mapStructNameAndType = structName => structName.includes('[]') ? {\n  type: 'tuple[]',\n  name: structName.slice(0, -2)\n} : {\n  type: 'tuple',\n  name: structName\n};\nexports.mapStructNameAndType = mapStructNameAndType;\n/**\n * Maps the simplified format in to the expected format of the ABICoder\n */\nconst mapStructToCoderFormat = struct => {\n  const components = [];\n  for (const key of Object.keys(struct)) {\n    const item = struct[key];\n    if (typeof item === 'object') {\n      components.push(Object.assign(Object.assign({}, (0, exports.mapStructNameAndType)(key)), {\n        components: (0, exports.mapStructToCoderFormat)(item)\n      }));\n    } else {\n      components.push({\n        name: key,\n        type: struct[key]\n      });\n    }\n  }\n  return components;\n};\nexports.mapStructToCoderFormat = mapStructToCoderFormat;\n/**\n * Map types if simplified format is used\n */\nconst mapTypes = types => {\n  const mappedTypes = [];\n  for (const type of types) {\n    let modifiedType = type;\n    // Clone object\n    if (typeof type === 'object') {\n      modifiedType = Object.assign({}, type);\n    }\n    // Remap `function` type params to bytes24 since Ethers does not\n    // recognize former type. Solidity docs say `Function` is a bytes24\n    // encoding the contract address followed by the function selector hash.\n    if (typeof type === 'object' && type.type === 'function') {\n      modifiedType = Object.assign(Object.assign({}, type), {\n        type: 'bytes24'\n      });\n    }\n    if ((0, exports.isSimplifiedStructFormat)(modifiedType)) {\n      const structName = Object.keys(modifiedType)[0];\n      mappedTypes.push(Object.assign(Object.assign({}, (0, exports.mapStructNameAndType)(structName)), {\n        components: (0, exports.mapStructToCoderFormat)(modifiedType[structName])\n      }));\n    } else {\n      mappedTypes.push(modifiedType);\n    }\n  }\n  return mappedTypes;\n};\nexports.mapTypes = mapTypes;\n/**\n * returns true if input is a hexstring and is odd-lengthed\n */\nconst isOddHexstring = param => typeof param === 'string' && /^(-)?0x[0-9a-f]*$/i.test(param) && param.length % 2 === 1;\nexports.isOddHexstring = isOddHexstring;\n/**\n * format odd-length bytes to even-length\n */\nconst formatOddHexstrings = param => (0, exports.isOddHexstring)(param) ? `0x0${param.substring(2)}` : param;\nexports.formatOddHexstrings = formatOddHexstrings;\n/**\n * Handle some formatting of params for backwards compatibility with Ethers V4\n */\nconst formatParam = (type, _param) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  var _a;\n  // clone if _param is an object\n  const param = typeof _param === 'object' && !Array.isArray(_param) ? Object.assign({}, _param) : _param;\n  const paramTypeBytes = /^bytes([0-9]*)$/;\n  const paramTypeBytesArray = /^bytes([0-9]*)\\[\\]$/;\n  const paramTypeNumber = /^(u?int)([0-9]*)$/;\n  const paramTypeNumberArray = /^(u?int)([0-9]*)\\[\\]$/;\n  // Format BN to string\n  if (param instanceof BigInt) {\n    return param.toString(10);\n  }\n  if (paramTypeBytesArray.exec(type) || paramTypeNumberArray.exec(type)) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    const paramClone = [...param];\n    return paramClone.map(p => (0, exports.formatParam)(type.replace('[]', ''), p));\n  }\n  // Format correct width for u?int[0-9]*\n  let match = paramTypeNumber.exec(type);\n  if (match) {\n    const size = parseInt((_a = match[2]) !== null && _a !== void 0 ? _a : '256', 10);\n    if (size / 8 < param.length) {\n      // pad to correct bit width\n      return (0, web3_utils_1.leftPad)(param, size);\n    }\n  }\n  // Format correct length for bytes[0-9]+\n  match = paramTypeBytes.exec(type);\n  if (match) {\n    const hexParam = param instanceof Uint8Array ? (0, web3_utils_1.toHex)(param) : param;\n    // format to correct length\n    const size = parseInt(match[1], 10);\n    if (size) {\n      let maxSize = size * 2;\n      if (param.startsWith('0x')) {\n        maxSize += 2;\n      }\n      // pad to correct length\n      const paddedParam = hexParam.length < maxSize ? (0, web3_utils_1.rightPad)(param, size * 2) : hexParam;\n      return (0, exports.formatOddHexstrings)(paddedParam);\n    }\n    return (0, exports.formatOddHexstrings)(hexParam);\n  }\n  return param;\n};\nexports.formatParam = formatParam;\n// eslint-disable-next-line consistent-return\nconst modifyParams = (coder, param) => {\n  if (coder.name === 'array') {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return param.map(p =>\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    (0, exports.modifyParams)(ethers_abi_coder_js_1.default._getCoder(abi_1.ParamType.from(coder.type.replace('[]', ''))), [p]));\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-explicit-any\n  coder.coders.forEach((c, i) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (c.name === 'tuple') {\n      (0, exports.modifyParams)(c, [param[i]]);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, no-param-reassign\n      param[i] = (0, exports.formatParam)(c.name, param[i]);\n    }\n  });\n  return [];\n};\nexports.modifyParams = modifyParams;\n/**\n *  used to flatten json abi inputs/outputs into an array of type-representing-strings\n */\nconst flattenTypes = (includeTuple, puts) => {\n  const types = [];\n  puts.forEach(param => {\n    if (typeof param.components === 'object') {\n      if (!param.type.startsWith('tuple')) {\n        throw new web3_errors_1.AbiError(`Invalid value given \"${param.type}\". Error: components found but type is not tuple.`);\n      }\n      const arrayBracket = param.type.indexOf('[');\n      const suffix = arrayBracket >= 0 ? param.type.substring(arrayBracket) : '';\n      const result = (0, exports.flattenTypes)(includeTuple, param.components);\n      if (Array.isArray(result) && includeTuple) {\n        types.push(`tuple(${result.join(',')})${suffix}`);\n      } else if (!includeTuple) {\n        types.push(`(${result.join(',')})${suffix}`);\n      } else {\n        types.push(`(${result.join()})`);\n      }\n    } else {\n      types.push(param.type);\n    }\n  });\n  return types;\n};\nexports.flattenTypes = flattenTypes;\n/**\n * Should be used to create full function/event name from json abi\n * returns a string\n */\nconst jsonInterfaceMethodToString = json => {\n  var _a, _b, _c, _d;\n  if ((0, exports.isAbiErrorFragment)(json) || (0, exports.isAbiEventFragment)(json) || (0, exports.isAbiFunctionFragment)(json)) {\n    if ((_a = json.name) === null || _a === void 0 ? void 0 : _a.includes('(')) {\n      return json.name;\n    }\n    return `${(_b = json.name) !== null && _b !== void 0 ? _b : ''}(${(0, exports.flattenTypes)(false, (_c = json.inputs) !== null && _c !== void 0 ? _c : []).join(',')})`;\n  }\n  // Constructor fragment\n  return `(${(0, exports.flattenTypes)(false, (_d = json.inputs) !== null && _d !== void 0 ? _d : []).join(',')})`;\n};\nexports.jsonInterfaceMethodToString = jsonInterfaceMethodToString;","map":{"version":3,"names":["web3_errors_1","require","abi_1","web3_utils_1","ethers_abi_coder_js_1","__importDefault","isAbiFragment","item","isNullish","type","includes","exports","isAbiErrorFragment","isAbiEventFragment","isAbiFunctionFragment","isAbiConstructorFragment","isSimplifiedStructFormat","components","name","mapStructNameAndType","structName","slice","mapStructToCoderFormat","struct","key","Object","keys","push","assign","mapTypes","types","mappedTypes","modifiedType","isOddHexstring","param","test","length","formatOddHexstrings","substring","formatParam","_param","Array","isArray","paramTypeBytes","paramTypeBytesArray","paramTypeNumber","paramTypeNumberArray","BigInt","toString","exec","paramClone","map","p","replace","match","size","parseInt","_a","leftPad","hexParam","Uint8Array","toHex","maxSize","startsWith","paddedParam","rightPad","modifyParams","coder","default","_getCoder","ParamType","from","coders","forEach","c","i","flattenTypes","includeTuple","puts","AbiError","arrayBracket","indexOf","suffix","result","join","jsonInterfaceMethodToString","json","_b","_c","inputs","_d"],"sources":["/Users/branko/Documents/Web3_FE_task/node_modules/web3-eth-abi/src/utils.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { AbiError } from 'web3-errors';\nimport { AbiCoder, ParamType } from '@ethersproject/abi';\nimport { isNullish, leftPad, rightPad, toHex } from 'web3-utils';\nimport {\n\tAbiInput,\n\tAbiCoderStruct,\n\tAbiFragment,\n\tAbiParameter,\n\tAbiStruct,\n\tAbiEventFragment,\n\tAbiFunctionFragment,\n\tAbiConstructorFragment,\n} from 'web3-types';\nimport ethersAbiCoder from './ethers_abi_coder.js';\n\nexport const isAbiFragment = (item: unknown): item is AbiFragment =>\n\t!isNullish(item) &&\n\ttypeof item === 'object' &&\n\t!isNullish((item as { type: string }).type) &&\n\t['function', 'event', 'constructor', 'error'].includes((item as { type: string }).type);\n\nexport const isAbiErrorFragment = (item: unknown): item is AbiEventFragment =>\n\t!isNullish(item) &&\n\ttypeof item === 'object' &&\n\t!isNullish((item as { type: string }).type) &&\n\t(item as { type: string }).type === 'error';\n\nexport const isAbiEventFragment = (item: unknown): item is AbiEventFragment =>\n\t!isNullish(item) &&\n\ttypeof item === 'object' &&\n\t!isNullish((item as { type: string }).type) &&\n\t(item as { type: string }).type === 'event';\n\nexport const isAbiFunctionFragment = (item: unknown): item is AbiFunctionFragment =>\n\t!isNullish(item) &&\n\ttypeof item === 'object' &&\n\t!isNullish((item as { type: string }).type) &&\n\t(item as { type: string }).type === 'function';\n\nexport const isAbiConstructorFragment = (item: unknown): item is AbiConstructorFragment =>\n\t!isNullish(item) &&\n\ttypeof item === 'object' &&\n\t!isNullish((item as { type: string }).type) &&\n\t(item as { type: string }).type === 'constructor';\n\n/**\n * Check if type is simplified struct format\n */\nexport const isSimplifiedStructFormat = (\n\ttype: string | Partial<AbiParameter> | Partial<AbiInput>,\n): type is Omit<AbiParameter, 'components' | 'name'> =>\n\ttypeof type === 'object' &&\n\ttypeof (type as { components: unknown }).components === 'undefined' &&\n\ttypeof (type as { name: unknown }).name === 'undefined';\n\n/**\n * Maps the correct tuple type and name when the simplified format in encode/decodeParameter is used\n */\nexport const mapStructNameAndType = (structName: string): AbiStruct =>\n\tstructName.includes('[]')\n\t\t? { type: 'tuple[]', name: structName.slice(0, -2) }\n\t\t: { type: 'tuple', name: structName };\n\n/**\n * Maps the simplified format in to the expected format of the ABICoder\n */\nexport const mapStructToCoderFormat = (struct: AbiStruct): Array<AbiCoderStruct> => {\n\tconst components: Array<AbiCoderStruct> = [];\n\n\tfor (const key of Object.keys(struct)) {\n\t\tconst item = struct[key];\n\n\t\tif (typeof item === 'object') {\n\t\t\tcomponents.push({\n\t\t\t\t...mapStructNameAndType(key),\n\t\t\t\tcomponents: mapStructToCoderFormat(item as unknown as AbiStruct),\n\t\t\t});\n\t\t} else {\n\t\t\tcomponents.push({\n\t\t\t\tname: key,\n\t\t\t\ttype: struct[key] as string,\n\t\t\t});\n\t\t}\n\t}\n\treturn components;\n};\n\n/**\n * Map types if simplified format is used\n */\nexport const mapTypes = (\n\ttypes: AbiInput[],\n): Array<string | AbiParameter | Record<string, unknown>> => {\n\tconst mappedTypes: Array<string | AbiParameter | Record<string, unknown>> = [];\n\n\tfor (const type of types) {\n\t\tlet modifiedType = type;\n\n\t\t// Clone object\n\t\tif (typeof type === 'object') {\n\t\t\tmodifiedType = { ...type };\n\t\t}\n\n\t\t// Remap `function` type params to bytes24 since Ethers does not\n\t\t// recognize former type. Solidity docs say `Function` is a bytes24\n\t\t// encoding the contract address followed by the function selector hash.\n\t\tif (typeof type === 'object' && type.type === 'function') {\n\t\t\tmodifiedType = { ...type, type: 'bytes24' };\n\t\t}\n\n\t\tif (isSimplifiedStructFormat(modifiedType)) {\n\t\t\tconst structName = Object.keys(modifiedType)[0] as unknown as keyof typeof modifiedType;\n\n\t\t\tmappedTypes.push({\n\t\t\t\t...mapStructNameAndType(structName),\n\t\t\t\tcomponents: mapStructToCoderFormat(\n\t\t\t\t\tmodifiedType[structName] as unknown as AbiStruct,\n\t\t\t\t) as unknown as AbiParameter[],\n\t\t\t});\n\t\t} else {\n\t\t\tmappedTypes.push(modifiedType);\n\t\t}\n\t}\n\n\treturn mappedTypes;\n};\n\n/**\n * returns true if input is a hexstring and is odd-lengthed\n */\nexport const isOddHexstring = (param: unknown): boolean =>\n\ttypeof param === 'string' && /^(-)?0x[0-9a-f]*$/i.test(param) && param.length % 2 === 1;\n\n/**\n * format odd-length bytes to even-length\n */\nexport const formatOddHexstrings = (param: string): string =>\n\tisOddHexstring(param) ? `0x0${param.substring(2)}` : param;\n\n/**\n * Handle some formatting of params for backwards compatibility with Ethers V4\n */\nexport const formatParam = (type: string, _param: unknown): unknown => {\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n\t// clone if _param is an object\n\tconst param = typeof _param === 'object' && !Array.isArray(_param) ? { ..._param } : _param;\n\tconst paramTypeBytes = /^bytes([0-9]*)$/;\n\tconst paramTypeBytesArray = /^bytes([0-9]*)\\[\\]$/;\n\tconst paramTypeNumber = /^(u?int)([0-9]*)$/;\n\tconst paramTypeNumberArray = /^(u?int)([0-9]*)\\[\\]$/;\n\n\t// Format BN to string\n\tif (param instanceof BigInt) {\n\t\treturn param.toString(10);\n\t}\n\n\tif (paramTypeBytesArray.exec(type) || paramTypeNumberArray.exec(type)) {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\tconst paramClone = [...(param as Array<unknown>)];\n\t\treturn paramClone.map(p => formatParam(type.replace('[]', ''), p));\n\t}\n\n\t// Format correct width for u?int[0-9]*\n\tlet match = paramTypeNumber.exec(type);\n\tif (match) {\n\t\tconst size = parseInt(match[2] ?? '256', 10);\n\t\tif (size / 8 < (param as { length: number }).length) {\n\t\t\t// pad to correct bit width\n\t\t\treturn leftPad(param as string, size);\n\t\t}\n\t}\n\n\t// Format correct length for bytes[0-9]+\n\tmatch = paramTypeBytes.exec(type);\n\tif (match) {\n\t\tconst hexParam = param instanceof Uint8Array ? toHex(param) : param;\n\n\t\t// format to correct length\n\t\tconst size = parseInt(match[1], 10);\n\t\tif (size) {\n\t\t\tlet maxSize = size * 2;\n\n\t\t\tif ((param as string).startsWith('0x')) {\n\t\t\t\tmaxSize += 2;\n\t\t\t}\n\t\t\t// pad to correct length\n\t\t\tconst paddedParam =\n\t\t\t\t(hexParam as string).length < maxSize\n\t\t\t\t\t? rightPad(param as string, size * 2)\n\t\t\t\t\t: hexParam;\n\t\t\treturn formatOddHexstrings(paddedParam as string);\n\t\t}\n\n\t\treturn formatOddHexstrings(hexParam as string);\n\t}\n\treturn param;\n};\n\n// eslint-disable-next-line consistent-return\nexport const modifyParams = (\n\tcoder: ReturnType<AbiCoder['_getCoder']>,\n\tparam: unknown[],\n\t// eslint-disable-next-line consistent-return\n): unknown => {\n\tif (coder.name === 'array') {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\treturn param.map(p =>\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\tmodifyParams(ethersAbiCoder._getCoder(ParamType.from(coder.type.replace('[]', ''))), [\n\t\t\t\tp,\n\t\t\t]),\n\t\t);\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-explicit-any\n\t(coder as any).coders.forEach((c: ReturnType<AbiCoder['_getCoder']>, i: number) => {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\tif (c.name === 'tuple') {\n\t\t\tmodifyParams(c, [param[i]]);\n\t\t} else {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, no-param-reassign\n\t\t\tparam[i] = formatParam(c.name, param[i]);\n\t\t}\n\t});\n\treturn [];\n};\n\n/**\n *  used to flatten json abi inputs/outputs into an array of type-representing-strings\n */\n\nexport const flattenTypes = (\n\tincludeTuple: boolean,\n\tputs: ReadonlyArray<AbiParameter>,\n): string[] => {\n\tconst types: string[] = [];\n\n\tputs.forEach(param => {\n\t\tif (typeof param.components === 'object') {\n\t\t\tif (!param.type.startsWith('tuple')) {\n\t\t\t\tthrow new AbiError(\n\t\t\t\t\t`Invalid value given \"${param.type}\". Error: components found but type is not tuple.`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst arrayBracket = param.type.indexOf('[');\n\t\t\tconst suffix = arrayBracket >= 0 ? param.type.substring(arrayBracket) : '';\n\t\t\tconst result = flattenTypes(includeTuple, param.components);\n\n\t\t\tif (Array.isArray(result) && includeTuple) {\n\t\t\t\ttypes.push(`tuple(${result.join(',')})${suffix}`);\n\t\t\t} else if (!includeTuple) {\n\t\t\t\ttypes.push(`(${result.join(',')})${suffix}`);\n\t\t\t} else {\n\t\t\t\ttypes.push(`(${result.join()})`);\n\t\t\t}\n\t\t} else {\n\t\t\ttypes.push(param.type);\n\t\t}\n\t});\n\n\treturn types;\n};\n\n/**\n * Should be used to create full function/event name from json abi\n * returns a string\n */\nexport const jsonInterfaceMethodToString = (json: AbiFragment): string => {\n\tif (isAbiErrorFragment(json) || isAbiEventFragment(json) || isAbiFunctionFragment(json)) {\n\t\tif (json.name?.includes('(')) {\n\t\t\treturn json.name;\n\t\t}\n\n\t\treturn `${json.name ?? ''}(${flattenTypes(false, json.inputs ?? []).join(',')})`;\n\t}\n\n\t// Constructor fragment\n\treturn `(${flattenTypes(false, json.inputs ?? []).join(',')})`;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}