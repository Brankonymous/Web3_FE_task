{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeDeep = void 0;\nconst web3_types_1 = require(\"web3-types\");\nconst web3_validator_1 = require(\"web3-validator\");\nconst isIterable = item => typeof item === 'object' && !(0, web3_validator_1.isNullish)(item) && !Array.isArray(item) && !(item instanceof web3_types_1.TypedArray);\n// The following code is a derivative work of the code from the \"LiskHQ/lisk-sdk\" project,\n// which is licensed under Apache version 2.\n/**\n * Deep merge two objects.\n * @param destination - The destination object.\n * @param sources - An array of source objects.\n * @returns - The merged object.\n */\nconst mergeDeep = (destination, ...sources) => {\n  const result = destination; // clone deep here\n  if (!isIterable(result)) {\n    return result;\n  }\n  for (const src of sources) {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key in src) {\n      if (isIterable(src[key])) {\n        if (!result[key]) {\n          result[key] = {};\n        }\n        (0, exports.mergeDeep)(result[key], src[key]);\n      } else if (!(0, web3_validator_1.isNullish)(src[key]) && Object.hasOwnProperty.call(src, key)) {\n        if (Array.isArray(src[key]) || src[key] instanceof web3_types_1.TypedArray) {\n          result[key] = src[key].slice(0);\n        } else {\n          result[key] = src[key];\n        }\n      }\n    }\n  }\n  return result;\n};\nexports.mergeDeep = mergeDeep;","map":{"version":3,"names":["web3_types_1","require","web3_validator_1","isIterable","item","isNullish","Array","isArray","TypedArray","mergeDeep","destination","sources","result","src","key","exports","Object","hasOwnProperty","call","slice"],"sources":["/Users/branko/Documents/Web3_FE_task/node_modules/web3-utils/src/objects.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { TypedArray } from 'web3-types';\nimport { isNullish } from 'web3-validator';\n\nconst isIterable = (item: unknown): item is Record<string, unknown> =>\n\ttypeof item === 'object' &&\n\t!isNullish(item) &&\n\t!Array.isArray(item) &&\n\t!(item instanceof TypedArray);\n\n// The following code is a derivative work of the code from the \"LiskHQ/lisk-sdk\" project,\n// which is licensed under Apache version 2.\n/**\n * Deep merge two objects.\n * @param destination - The destination object.\n * @param sources - An array of source objects.\n * @returns - The merged object.\n */\nexport const mergeDeep = (\n\tdestination: Record<string, unknown>,\n\t...sources: Record<string, unknown>[]\n): Record<string, unknown> => {\n\tconst result = destination; // clone deep here\n\tif (!isIterable(result)) {\n\t\treturn result;\n\t}\n\tfor (const src of sources) {\n\t\t// eslint-disable-next-line no-restricted-syntax\n\t\tfor (const key in src) {\n\t\t\tif (isIterable(src[key])) {\n\t\t\t\tif (!result[key]) {\n\t\t\t\t\tresult[key] = {};\n\t\t\t\t}\n\t\t\t\tmergeDeep(\n\t\t\t\t\tresult[key] as Record<string, unknown>,\n\t\t\t\t\tsrc[key] as Record<string, unknown>,\n\t\t\t\t);\n\t\t\t} else if (!isNullish(src[key]) && Object.hasOwnProperty.call(src, key)) {\n\t\t\t\tif (Array.isArray(src[key]) || src[key] instanceof TypedArray) {\n\t\t\t\t\tresult[key] = (src[key] as unknown[]).slice(0);\n\t\t\t\t} else {\n\t\t\t\t\tresult[key] = src[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n};\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAiBA,MAAAA,YAAA,GAAAC,OAAA;AACA,MAAAC,gBAAA,GAAAD,OAAA;AAEA,MAAME,UAAU,GAAIC,IAAa,IAChC,OAAOA,IAAI,KAAK,QAAQ,IACxB,CAAC,IAAAF,gBAAA,CAAAG,SAAS,EAACD,IAAI,CAAC,IAChB,CAACE,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,IACpB,EAAEA,IAAI,YAAYJ,YAAA,CAAAQ,UAAU,CAAC;AAE9B;AACA;AACA;;;;;;AAMO,MAAMC,SAAS,GAAGA,CACxBC,WAAoC,EACpC,GAAGC,OAAkC,KACT;EAC5B,MAAMC,MAAM,GAAGF,WAAW,CAAC,CAAC;EAC5B,IAAI,CAACP,UAAU,CAACS,MAAM,CAAC,EAAE;IACxB,OAAOA,MAAM;;EAEd,KAAK,MAAMC,GAAG,IAAIF,OAAO,EAAE;IAC1B;IACA,KAAK,MAAMG,GAAG,IAAID,GAAG,EAAE;MACtB,IAAIV,UAAU,CAACU,GAAG,CAACC,GAAG,CAAC,CAAC,EAAE;QACzB,IAAI,CAACF,MAAM,CAACE,GAAG,CAAC,EAAE;UACjBF,MAAM,CAACE,GAAG,CAAC,GAAG,EAAE;;QAEjB,IAAAC,OAAA,CAAAN,SAAS,EACRG,MAAM,CAACE,GAAG,CAA4B,EACtCD,GAAG,CAACC,GAAG,CAA4B,CACnC;OACD,MAAM,IAAI,CAAC,IAAAZ,gBAAA,CAAAG,SAAS,EAACQ,GAAG,CAACC,GAAG,CAAC,CAAC,IAAIE,MAAM,CAACC,cAAc,CAACC,IAAI,CAACL,GAAG,EAAEC,GAAG,CAAC,EAAE;QACxE,IAAIR,KAAK,CAACC,OAAO,CAACM,GAAG,CAACC,GAAG,CAAC,CAAC,IAAID,GAAG,CAACC,GAAG,CAAC,YAAYd,YAAA,CAAAQ,UAAU,EAAE;UAC9DI,MAAM,CAACE,GAAG,CAAC,GAAID,GAAG,CAACC,GAAG,CAAe,CAACK,KAAK,CAAC,CAAC,CAAC;SAC9C,MAAM;UACNP,MAAM,CAACE,GAAG,CAAC,GAAGD,GAAG,CAACC,GAAG,CAAC;;;;;EAK1B,OAAOF,MAAM;AACd,CAAC;AA7BYG,OAAA,CAAAN,SAAS,GAAAA,SAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}