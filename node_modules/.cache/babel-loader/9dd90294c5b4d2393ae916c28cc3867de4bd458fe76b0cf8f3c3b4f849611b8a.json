{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { jsonRpc, Web3DeferredPromise } from 'web3-utils';\nimport { OperationAbortError, OperationTimeoutError, ResponseError } from 'web3-errors';\nexport const DEFAULT_BATCH_REQUEST_TIMEOUT = 1000;\nexport class Web3BatchRequest {\n  constructor(requestManager) {\n    this._requestManager = requestManager;\n    this._requests = new Map();\n  }\n  get requests() {\n    return [...this._requests.values()].map(r => r.payload);\n  }\n  add(request) {\n    const payload = jsonRpc.toPayload(request);\n    const promise = new Web3DeferredPromise();\n    this._requests.set(payload.id, {\n      payload,\n      promise\n    });\n    return promise;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  execute() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.requests.length === 0) {\n        return Promise.resolve([]);\n      }\n      const request = new Web3DeferredPromise({\n        timeout: DEFAULT_BATCH_REQUEST_TIMEOUT,\n        eagerStart: true,\n        timeoutMessage: 'Batch request timeout'\n      });\n      this._processBatchRequest(request).catch(err => request.reject(err));\n      request.catch(err => {\n        if (err instanceof OperationTimeoutError) {\n          this._abortAllRequests('Batch request timeout');\n        }\n        request.reject(err);\n      });\n      return request;\n    });\n  }\n  _processBatchRequest(promise) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield this._requestManager.sendBatch([...this._requests.values()].map(r => r.payload));\n      if (response.length !== this._requests.size) {\n        this._abortAllRequests('Invalid batch response');\n        throw new ResponseError(response, `Batch request size mismatch the results size. Requests: ${this._requests.size}, Responses: ${response.length}`);\n      }\n      const requestIds = this.requests.map(r => r.id).map(Number).sort((a, b) => a - b);\n      const responseIds = response.map(r => r.id).map(Number).sort((a, b) => a - b);\n      if (JSON.stringify(requestIds) !== JSON.stringify(responseIds)) {\n        this._abortAllRequests('Invalid batch response');\n        throw new ResponseError(response, `Batch request mismatch the results. Requests: [${requestIds.join()}], Responses: [${responseIds.join()}]`);\n      }\n      for (const res of response) {\n        if (jsonRpc.isResponseWithResult(res)) {\n          (_a = this._requests.get(res.id)) === null || _a === void 0 ? void 0 : _a.promise.resolve(res.result);\n        } else if (jsonRpc.isResponseWithError(res)) {\n          (_b = this._requests.get(res.id)) === null || _b === void 0 ? void 0 : _b.promise.reject(res.error);\n        }\n      }\n      promise.resolve(response);\n    });\n  }\n  _abortAllRequests(msg) {\n    for (const {\n      promise\n    } of this._requests.values()) {\n      promise.reject(new OperationAbortError(msg));\n    }\n  }\n}","map":{"version":3,"names":["jsonRpc","Web3DeferredPromise","OperationAbortError","OperationTimeoutError","ResponseError","DEFAULT_BATCH_REQUEST_TIMEOUT","Web3BatchRequest","constructor","requestManager","_requestManager","_requests","Map","requests","values","map","r","payload","add","request","toPayload","promise","set","id","execute","length","Promise","resolve","timeout","eagerStart","timeoutMessage","_processBatchRequest","catch","err","reject","_abortAllRequests","response","sendBatch","size","requestIds","Number","sort","a","b","responseIds","JSON","stringify","join","res","isResponseWithResult","_a","get","result","isResponseWithError","_b","error","msg"],"sources":["/Users/branko/Documents/Web3_FE_task/node_modules/web3-core/src/web3_batch_request.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { JsonRpcBatchResponse, JsonRpcOptionalRequest, JsonRpcRequest } from 'web3-types';\nimport { jsonRpc, Web3DeferredPromise } from 'web3-utils';\nimport { OperationAbortError, OperationTimeoutError, ResponseError } from 'web3-errors';\nimport { Web3RequestManager } from './web3_request_manager.js';\n\nexport const DEFAULT_BATCH_REQUEST_TIMEOUT = 1000;\n\nexport class Web3BatchRequest {\n\tprivate readonly _requestManager: Web3RequestManager;\n\tprivate readonly _requests: Map<\n\t\tnumber,\n\t\t{ payload: JsonRpcRequest; promise: Web3DeferredPromise<unknown> }\n\t>;\n\n\tpublic constructor(requestManager: Web3RequestManager) {\n\t\tthis._requestManager = requestManager;\n\t\tthis._requests = new Map();\n\t}\n\n\tpublic get requests() {\n\t\treturn [...this._requests.values()].map(r => r.payload);\n\t}\n\n\tpublic add<ResponseType = unknown>(request: JsonRpcOptionalRequest<unknown>) {\n\t\tconst payload = jsonRpc.toPayload(request) as JsonRpcRequest;\n\t\tconst promise = new Web3DeferredPromise<ResponseType>();\n\n\t\tthis._requests.set(payload.id as number, { payload, promise });\n\n\t\treturn promise;\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\tpublic async execute(): Promise<JsonRpcBatchResponse<unknown, unknown>> {\n\t\tif (this.requests.length === 0) {\n\t\t\treturn Promise.resolve([]);\n\t\t}\n\n\t\tconst request = new Web3DeferredPromise<JsonRpcBatchResponse<unknown, unknown>>({\n\t\t\ttimeout: DEFAULT_BATCH_REQUEST_TIMEOUT,\n\t\t\teagerStart: true,\n\t\t\ttimeoutMessage: 'Batch request timeout',\n\t\t});\n\n\t\tthis._processBatchRequest(request).catch(err => request.reject(err));\n\n\t\trequest.catch((err: Error) => {\n\t\t\tif (err instanceof OperationTimeoutError) {\n\t\t\t\tthis._abortAllRequests('Batch request timeout');\n\t\t\t}\n\n\t\t\trequest.reject(err);\n\t\t});\n\n\t\treturn request;\n\t}\n\n\tprivate async _processBatchRequest(\n\t\tpromise: Web3DeferredPromise<JsonRpcBatchResponse<unknown, unknown>>,\n\t) {\n\t\tconst response = await this._requestManager.sendBatch(\n\t\t\t[...this._requests.values()].map(r => r.payload),\n\t\t);\n\n\t\tif (response.length !== this._requests.size) {\n\t\t\tthis._abortAllRequests('Invalid batch response');\n\n\t\t\tthrow new ResponseError(\n\t\t\t\tresponse,\n\t\t\t\t`Batch request size mismatch the results size. Requests: ${this._requests.size}, Responses: ${response.length}`,\n\t\t\t);\n\t\t}\n\n\t\tconst requestIds = this.requests\n\t\t\t.map(r => r.id)\n\t\t\t.map(Number)\n\t\t\t.sort((a, b) => a - b);\n\n\t\tconst responseIds = response\n\t\t\t.map(r => r.id)\n\t\t\t.map(Number)\n\t\t\t.sort((a, b) => a - b);\n\n\t\tif (JSON.stringify(requestIds) !== JSON.stringify(responseIds)) {\n\t\t\tthis._abortAllRequests('Invalid batch response');\n\n\t\t\tthrow new ResponseError(\n\t\t\t\tresponse,\n\t\t\t\t`Batch request mismatch the results. Requests: [${requestIds.join()}], Responses: [${responseIds.join()}]`,\n\t\t\t);\n\t\t}\n\n\t\tfor (const res of response) {\n\t\t\tif (jsonRpc.isResponseWithResult(res)) {\n\t\t\t\tthis._requests.get(res.id as number)?.promise.resolve(res.result);\n\t\t\t} else if (jsonRpc.isResponseWithError(res)) {\n\t\t\t\tthis._requests.get(res.id as number)?.promise.reject(res.error);\n\t\t\t}\n\t\t}\n\n\t\tpromise.resolve(response);\n\t}\n\n\tprivate _abortAllRequests(msg: string) {\n\t\tfor (const { promise } of this._requests.values()) {\n\t\t\tpromise.reject(new OperationAbortError(msg));\n\t\t}\n\t}\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,SAASA,OAAO,EAAEC,mBAAmB,QAAQ,YAAY;AACzD,SAASC,mBAAmB,EAAEC,qBAAqB,EAAEC,aAAa,QAAQ,aAAa;AAGvF,OAAO,MAAMC,6BAA6B,GAAG,IAAI;AAEjD,OAAM,MAAOC,gBAAgB;EAO5BC,YAAmBC,cAAkC;IACpD,IAAI,CAACC,eAAe,GAAGD,cAAc;IACrC,IAAI,CAACE,SAAS,GAAG,IAAIC,GAAG,EAAE;EAC3B;EAEA,IAAWC,QAAQA,CAAA;IAClB,OAAO,CAAC,GAAG,IAAI,CAACF,SAAS,CAACG,MAAM,EAAE,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,OAAO,CAAC;EACxD;EAEOC,GAAGA,CAAyBC,OAAwC;IAC1E,MAAMF,OAAO,GAAGhB,OAAO,CAACmB,SAAS,CAACD,OAAO,CAAmB;IAC5D,MAAME,OAAO,GAAG,IAAInB,mBAAmB,EAAgB;IAEvD,IAAI,CAACS,SAAS,CAACW,GAAG,CAACL,OAAO,CAACM,EAAY,EAAE;MAAEN,OAAO;MAAEI;IAAO,CAAE,CAAC;IAE9D,OAAOA,OAAO;EACf;EAEA;EACaG,OAAOA,CAAA;;MACnB,IAAI,IAAI,CAACX,QAAQ,CAACY,MAAM,KAAK,CAAC,EAAE;QAC/B,OAAOC,OAAO,CAACC,OAAO,CAAC,EAAE,CAAC;;MAG3B,MAAMR,OAAO,GAAG,IAAIjB,mBAAmB,CAAyC;QAC/E0B,OAAO,EAAEtB,6BAA6B;QACtCuB,UAAU,EAAE,IAAI;QAChBC,cAAc,EAAE;OAChB,CAAC;MAEF,IAAI,CAACC,oBAAoB,CAACZ,OAAO,CAAC,CAACa,KAAK,CAACC,GAAG,IAAId,OAAO,CAACe,MAAM,CAACD,GAAG,CAAC,CAAC;MAEpEd,OAAO,CAACa,KAAK,CAAEC,GAAU,IAAI;QAC5B,IAAIA,GAAG,YAAY7B,qBAAqB,EAAE;UACzC,IAAI,CAAC+B,iBAAiB,CAAC,uBAAuB,CAAC;;QAGhDhB,OAAO,CAACe,MAAM,CAACD,GAAG,CAAC;MACpB,CAAC,CAAC;MAEF,OAAOd,OAAO;IACf,CAAC;;EAEaY,oBAAoBA,CACjCV,OAAoE;;;MAEpE,MAAMe,QAAQ,GAAG,MAAM,IAAI,CAAC1B,eAAe,CAAC2B,SAAS,CACpD,CAAC,GAAG,IAAI,CAAC1B,SAAS,CAACG,MAAM,EAAE,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,OAAO,CAAC,CAChD;MAED,IAAImB,QAAQ,CAACX,MAAM,KAAK,IAAI,CAACd,SAAS,CAAC2B,IAAI,EAAE;QAC5C,IAAI,CAACH,iBAAiB,CAAC,wBAAwB,CAAC;QAEhD,MAAM,IAAI9B,aAAa,CACtB+B,QAAQ,EACR,2DAA2D,IAAI,CAACzB,SAAS,CAAC2B,IAAI,gBAAgBF,QAAQ,CAACX,MAAM,EAAE,CAC/G;;MAGF,MAAMc,UAAU,GAAG,IAAI,CAAC1B,QAAQ,CAC9BE,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACO,EAAE,CAAC,CACdR,GAAG,CAACyB,MAAM,CAAC,CACXC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;MAEvB,MAAMC,WAAW,GAAGR,QAAQ,CAC1BrB,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACO,EAAE,CAAC,CACdR,GAAG,CAACyB,MAAM,CAAC,CACXC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;MAEvB,IAAIE,IAAI,CAACC,SAAS,CAACP,UAAU,CAAC,KAAKM,IAAI,CAACC,SAAS,CAACF,WAAW,CAAC,EAAE;QAC/D,IAAI,CAACT,iBAAiB,CAAC,wBAAwB,CAAC;QAEhD,MAAM,IAAI9B,aAAa,CACtB+B,QAAQ,EACR,kDAAkDG,UAAU,CAACQ,IAAI,EAAE,kBAAkBH,WAAW,CAACG,IAAI,EAAE,GAAG,CAC1G;;MAGF,KAAK,MAAMC,GAAG,IAAIZ,QAAQ,EAAE;QAC3B,IAAInC,OAAO,CAACgD,oBAAoB,CAACD,GAAG,CAAC,EAAE;UACtC,CAAAE,EAAA,OAAI,CAACvC,SAAS,CAACwC,GAAG,CAACH,GAAG,CAACzB,EAAY,CAAC,cAAA2B,EAAA,uBAAAA,EAAA,CAAE7B,OAAO,CAACM,OAAO,CAACqB,GAAG,CAACI,MAAM,CAAC;SACjE,MAAM,IAAInD,OAAO,CAACoD,mBAAmB,CAACL,GAAG,CAAC,EAAE;UAC5C,CAAAM,EAAA,OAAI,CAAC3C,SAAS,CAACwC,GAAG,CAACH,GAAG,CAACzB,EAAY,CAAC,cAAA+B,EAAA,uBAAAA,EAAA,CAAEjC,OAAO,CAACa,MAAM,CAACc,GAAG,CAACO,KAAK,CAAC;;;MAIjElC,OAAO,CAACM,OAAO,CAACS,QAAQ,CAAC;;;EAGlBD,iBAAiBA,CAACqB,GAAW;IACpC,KAAK,MAAM;MAAEnC;IAAO,CAAE,IAAI,IAAI,CAACV,SAAS,CAACG,MAAM,EAAE,EAAE;MAClDO,OAAO,CAACa,MAAM,CAAC,IAAI/B,mBAAmB,CAACqD,GAAG,CAAC,CAAC;;EAE9C"},"metadata":{},"sourceType":"module","externalDependencies":[]}