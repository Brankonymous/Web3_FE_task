{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toChecksumAddress = exports.toWei = exports.fromWei = exports.toBigInt = exports.toNumber = exports.toHex = exports.toAscii = exports.hexToAscii = exports.fromAscii = exports.asciiToHex = exports.hexToString = exports.toUtf8 = exports.hexToUtf8 = exports.stringToHex = exports.fromUtf8 = exports.utf8ToHex = exports.hexToNumberString = exports.fromDecimal = exports.numberToHex = exports.toDecimal = exports.hexToNumber = exports.hexToBytes = exports.bytesToHex = exports.bytesToUint8Array = exports.ethUnitMap = void 0;\nconst keccak_js_1 = require(\"ethereum-cryptography/keccak.js\");\nconst utils_js_1 = require(\"ethereum-cryptography/utils.js\");\nconst web3_validator_1 = require(\"web3-validator\");\nconst web3_errors_1 = require(\"web3-errors\");\nconst base = BigInt(10);\nconst expo10 = expo => base ** BigInt(expo);\n// Ref: https://ethdocs.org/en/latest/ether.html\n/** @internal */\nexports.ethUnitMap = {\n  noether: BigInt('0'),\n  wei: BigInt(1),\n  kwei: expo10(3),\n  Kwei: expo10(3),\n  babbage: expo10(3),\n  femtoether: expo10(3),\n  mwei: expo10(6),\n  Mwei: expo10(6),\n  lovelace: expo10(6),\n  picoether: expo10(6),\n  gwei: expo10(9),\n  Gwei: expo10(9),\n  shannon: expo10(9),\n  nanoether: expo10(9),\n  nano: expo10(9),\n  szabo: expo10(12),\n  microether: expo10(12),\n  micro: expo10(12),\n  finney: expo10(15),\n  milliether: expo10(15),\n  milli: expo10(15),\n  ether: expo10(18),\n  kether: expo10(21),\n  grand: expo10(21),\n  mether: expo10(24),\n  gether: expo10(27),\n  tether: expo10(30)\n};\n/**\n * Convert a value from bytes to Uint8Array\n * @param data - Data to be converted\n * @returns - The Uint8Array representation of the input data\n *\n * @example\n * ```ts\n * console.log(web3.utils.bytesToUint8Array(\"0xab\")));\n * > Uint8Array(1) [ 171 ]\n * ```\n */\nconst bytesToUint8Array = data => {\n  web3_validator_1.validator.validate(['bytes'], [data]);\n  if (data instanceof Uint8Array) {\n    return data;\n  }\n  if (Array.isArray(data)) {\n    return new Uint8Array(data);\n  }\n  if (typeof data === 'string') {\n    return web3_validator_1.utils.hexToUint8Array(data);\n  }\n  throw new web3_errors_1.InvalidBytesError(data);\n};\nexports.bytesToUint8Array = bytesToUint8Array;\n/**\n * @internal\n */\nconst {\n  uint8ArrayToHexString\n} = web3_validator_1.utils;\n/**\n * Convert a byte array to a hex string\n * @param bytes - Byte array to be converted\n * @returns - The hex string representation of the input byte array\n *\n * @example\n * ```ts\n * console.log(web3.utils.bytesToHex(new Uint8Array([72, 12])));\n * > \"0x480c\"\n *\n */\nconst bytesToHex = bytes => uint8ArrayToHexString((0, exports.bytesToUint8Array)(bytes));\nexports.bytesToHex = bytesToHex;\n/**\n * Convert a hex string to a byte array\n * @param hex - Hex string to be converted\n * @returns - The byte array representation of the input hex string\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToBytes('0x74657374'));\n * > Uint8Array(4) [ 116, 101, 115, 116 ]\n * ```\n */\nconst hexToBytes = bytes => {\n  if (typeof bytes === 'string' && bytes.slice(0, 2).toLowerCase() !== '0x') {\n    return (0, exports.bytesToUint8Array)(`0x${bytes}`);\n  }\n  return (0, exports.bytesToUint8Array)(bytes);\n};\nexports.hexToBytes = hexToBytes;\n/**\n * Converts value to it's number representation\n * @param value - Hex string to be converted\n * @returns - The number representation of the input value\n *\n * @example\n * ```ts\n * conoslle.log(web3.utils.hexToNumber('0xa'));\n * > 10\n * ```\n */\nconst hexToNumber = value => {\n  web3_validator_1.validator.validate(['hex'], [value]);\n  // To avoid duplicate code and circular dependency we will\n  // use `hexToNumber` implementation from `web3-validator`\n  return web3_validator_1.utils.hexToNumber(value);\n};\nexports.hexToNumber = hexToNumber;\n/**\n * Converts value to it's number representation @alias `hexToNumber`\n */\nexports.toDecimal = exports.hexToNumber;\n/**\n * Converts value to it's hex representation\n * @param value - Value to be converted\n * @param hexstrict - Add padding to converted value if odd, to make it hexstrict\n * @returns - The hex representation of the input value\n *\n * @example\n * ```ts\n * console.log(web3.utils.numberToHex(10));\n * > \"0xa\"\n * ```\n */\nconst numberToHex = (value, hexstrict) => {\n  if (typeof value !== 'bigint') web3_validator_1.validator.validate(['int'], [value]);\n  // To avoid duplicate code and circular dependency we will\n  // use `numberToHex` implementation from `web3-validator`\n  let updatedValue = web3_validator_1.utils.numberToHex(value);\n  if (hexstrict) {\n    if (!updatedValue.startsWith('-') && updatedValue.length % 2 === 1) {\n      // To avoid duplicate a circular dependancy we will not be using the padLeft method\n      updatedValue = '0x0'.concat(updatedValue.slice(2));\n    } else if (updatedValue.length % 2 === 0 && updatedValue.startsWith('-')) updatedValue = '-0x0'.concat(updatedValue.slice(3));\n  }\n  return updatedValue;\n};\nexports.numberToHex = numberToHex;\n/**\n * Converts value to it's hex representation @alias `numberToHex`\n *\n */\nexports.fromDecimal = exports.numberToHex;\n/**\n * Converts value to it's decimal representation in string\n * @param value - Hex string to be converted\n * @returns - The decimal representation of the input value\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToNumberString('0xa'));\n * > \"10\"\n * ```\n */\nconst hexToNumberString = data => (0, exports.hexToNumber)(data).toString();\nexports.hexToNumberString = hexToNumberString;\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n * @param str - Utf8 string to be converted\n * @returns - The hex representation of the input string\n *\n * @example\n * ```ts\n * console.log(utf8ToHex('web3.js'));\n * > \"0x776562332e6a73\"\n *\n */\nconst utf8ToHex = str => {\n  web3_validator_1.validator.validate(['string'], [str]);\n  // To be compatible with 1.x trim null character\n  // eslint-disable-next-line no-control-regex\n  let strWithoutNullCharacter = str.replace(/^(?:\\u0000)/, '');\n  // eslint-disable-next-line no-control-regex\n  strWithoutNullCharacter = strWithoutNullCharacter.replace(/(?:\\u0000)$/, '');\n  return (0, exports.bytesToHex)(new TextEncoder().encode(strWithoutNullCharacter));\n};\nexports.utf8ToHex = utf8ToHex;\n/**\n * @alias utf8ToHex\n */\nexports.fromUtf8 = exports.utf8ToHex;\n/**\n * @alias utf8ToHex\n */\nexports.stringToHex = exports.utf8ToHex;\n/**\n * Should be called to get utf8 from it's hex representation\n * @param str - Hex string to be converted\n * @returns - Utf8 string\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToUtf8('0x48656c6c6f20576f726c64'));\n * > Hello World\n * ```\n */\nconst hexToUtf8 = str => (0, utils_js_1.bytesToUtf8)((0, exports.hexToBytes)(str));\nexports.hexToUtf8 = hexToUtf8;\n/**\n * @alias hexToUtf8\n */\nconst toUtf8 = input => {\n  if (typeof input === 'string') {\n    return (0, exports.hexToUtf8)(input);\n  }\n  web3_validator_1.validator.validate(['bytes'], [input]);\n  return (0, utils_js_1.bytesToUtf8)(input);\n};\nexports.toUtf8 = toUtf8;\n/**\n * @alias hexToUtf8\n */\nexports.hexToString = exports.hexToUtf8;\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n * @param str - String to be converted to hex\n * @returns - Hex string\n *\n * @example\n * ```ts\n * console.log(web3.utils.asciiToHex('Hello World'));\n * > 0x48656c6c6f20576f726c64\n * ```\n */\nconst asciiToHex = str => {\n  web3_validator_1.validator.validate(['string'], [str]);\n  let hexString = '';\n  for (let i = 0; i < str.length; i += 1) {\n    const hexCharCode = str.charCodeAt(i).toString(16);\n    // might need a leading 0\n    hexString += hexCharCode.length % 2 !== 0 ? `0${hexCharCode}` : hexCharCode;\n  }\n  return `0x${hexString}`;\n};\nexports.asciiToHex = asciiToHex;\n/**\n * @alias asciiToHex\n */\nexports.fromAscii = exports.asciiToHex;\n/**\n * Should be called to get ascii from it's hex representation\n * @param str - Hex string to be converted to ascii\n * @returns - Ascii string\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToAscii('0x48656c6c6f20576f726c64'));\n * > Hello World\n * ```\n */\nconst hexToAscii = str => {\n  const decoder = new TextDecoder('ascii');\n  return decoder.decode((0, exports.hexToBytes)(str));\n};\nexports.hexToAscii = hexToAscii;\n/**\n * @alias hexToAscii\n */\nexports.toAscii = exports.hexToAscii;\n/**\n * Auto converts any given value into it's hex representation.\n * @param value - Value to be converted to hex\n * @param returnType - If true, it will return the type of the value\n *\n * @example\n * ```ts\n * console.log(web3.utils.toHex(10));\n * > 0xa\n *\n * console.log(web3.utils.toHex('0x123', true));\n * > bytes\n *```\n */\nconst toHex = (value, returnType) => {\n  if (typeof value === 'string' && (0, web3_validator_1.isAddress)(value)) {\n    return returnType ? 'address' : `0x${value.toLowerCase().replace(/^0x/i, '')}`;\n  }\n  if (typeof value === 'boolean') {\n    // eslint-disable-next-line no-nested-ternary\n    return returnType ? 'bool' : value ? '0x01' : '0x00';\n  }\n  if (typeof value === 'number') {\n    // eslint-disable-next-line no-nested-ternary\n    return returnType ? value < 0 ? 'int256' : 'uint256' : (0, exports.numberToHex)(value);\n  }\n  if (typeof value === 'bigint') {\n    return returnType ? 'bigint' : (0, exports.numberToHex)(value);\n  }\n  if (typeof value === 'object' && !!value) {\n    return returnType ? 'string' : (0, exports.utf8ToHex)(JSON.stringify(value));\n  }\n  if (typeof value === 'string') {\n    if (value.startsWith('-0x') || value.startsWith('-0X')) {\n      return returnType ? 'int256' : (0, exports.numberToHex)(value);\n    }\n    if ((0, web3_validator_1.isHexStrict)(value)) {\n      return returnType ? 'bytes' : value;\n    }\n    if ((0, web3_validator_1.isHex)(value) && !(0, web3_validator_1.isInt)(value)) {\n      return returnType ? 'bytes' : `0x${value}`;\n    }\n    if (!Number.isFinite(value)) {\n      return returnType ? 'string' : (0, exports.utf8ToHex)(value);\n    }\n  }\n  throw new web3_errors_1.HexProcessingError(value);\n};\nexports.toHex = toHex;\n/**\n * Converts any given value into it's number representation, if possible, else into it's bigint representation.\n * @param value - The value to convert\n * @returns - Returns the value in number or bigint representation\n *\n * @example\n * ```ts\n * console.log(web3.utils.toNumber(1));\n * > 1\n * console.log(web3.utils.toNumber(Number.MAX_SAFE_INTEGER));\n * > 9007199254740991\n *\n * console.log(web3.utils.toNumber(BigInt(Number.MAX_SAFE_INTEGER)));\n * > 9007199254740991\n *\n * console.log(web3.utils.toNumber(BigInt(Number.MAX_SAFE_INTEGER) + BigInt(1)));\n * > 9007199254740992n\n *\n * ```\n */\nconst toNumber = value => {\n  if (typeof value === 'number') {\n    return value;\n  }\n  if (typeof value === 'bigint') {\n    return value >= Number.MIN_SAFE_INTEGER && value <= Number.MAX_SAFE_INTEGER ? Number(value) : value;\n  }\n  if (typeof value === 'string' && (0, web3_validator_1.isHexStrict)(value)) {\n    return (0, exports.hexToNumber)(value);\n  }\n  try {\n    return (0, exports.toNumber)(BigInt(value));\n  } catch (_a) {\n    throw new web3_errors_1.InvalidNumberError(value);\n  }\n};\nexports.toNumber = toNumber;\n/**\n * Auto converts any given value into it's bigint representation\n *\n * @param value - The value to convert\n * @returns - Returns the value in bigint representation\n\n * @example\n * ```ts\n * console.log(web3.utils.toBigInt(1));\n * > 1n\n * ```\n */\nconst toBigInt = value => {\n  if (typeof value === 'number') {\n    return BigInt(value);\n  }\n  if (typeof value === 'bigint') {\n    return value;\n  }\n  // isHex passes for dec, too\n  if (typeof value === 'string' && (0, web3_validator_1.isHex)(value)) {\n    return BigInt(value);\n  }\n  throw new web3_errors_1.InvalidNumberError(value);\n};\nexports.toBigInt = toBigInt;\n/**\n * Takes a number of wei and converts it to any other ether unit.\n * @param number - The value in wei\n * @param unit - The unit to convert to\n * @returns - Returns the converted value in the given unit\n *\n * @example\n * ```ts\n * console.log(web3.utils.fromWei(\"1\", \"ether\"));\n * > 0.000000000000000001\n *\n * console.log(web3.utils.fromWei(\"1\", \"shannon\"));\n * > 0.000000001\n * ```\n */\nconst fromWei = (number, unit) => {\n  const denomination = exports.ethUnitMap[unit];\n  if (!denomination) {\n    throw new web3_errors_1.InvalidUnitError(unit);\n  }\n  // value in wei would always be integer\n  // 13456789, 1234\n  const value = String((0, exports.toNumber)(number));\n  // count number of zeros in denomination\n  // 1000000 -> 6\n  const numberOfZerosInDenomination = denomination.toString().length - 1;\n  if (numberOfZerosInDenomination <= 0) {\n    return value.toString();\n  }\n  // pad the value with required zeros\n  // 13456789 -> 13456789, 1234 -> 001234\n  const zeroPaddedValue = value.padStart(numberOfZerosInDenomination, '0');\n  // get the integer part of value by counting number of zeros from start\n  // 13456789 -> '13'\n  // 001234 -> ''\n  const integer = zeroPaddedValue.slice(0, -numberOfZerosInDenomination);\n  // get the fraction part of value by counting number of zeros backward\n  // 13456789 -> '456789'\n  // 001234 -> '001234'\n  const fraction = zeroPaddedValue.slice(-numberOfZerosInDenomination).replace(/\\.?0+$/, '');\n  if (integer === '') {\n    return `0.${fraction}`;\n  }\n  if (fraction === '') {\n    return integer;\n  }\n  return `${integer}.${fraction}`;\n};\nexports.fromWei = fromWei;\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * @param number - The number to convert.\n * @param unit - {@link EtherUnits} The unit of the number passed.\n * @returns The number converted to wei.\n *\n * @example\n * ```ts\n * console.log(web3.utils.toWei(\"0.001\", \"ether\"));\n * > 1000000000000000 //(wei)\n * ```\n */\n// todo in 1.x unit defaults to 'ether'\nconst toWei = (number, unit) => {\n  web3_validator_1.validator.validate(['number'], [number]);\n  const denomination = exports.ethUnitMap[unit];\n  if (!denomination) {\n    throw new web3_errors_1.InvalidUnitError(unit);\n  }\n  // if value is decimal e.g. 24.56 extract `integer` and `fraction` part\n  // to avoid `fraction` to be null use `concat` with empty string\n  const [integer, fraction] = String(typeof number === 'string' && !(0, web3_validator_1.isHexStrict)(number) ? number : (0, exports.toNumber)(number)).split('.').concat('');\n  // join the value removing `.` from\n  // 24.56 -> 2456\n  const value = BigInt(`${integer}${fraction}`);\n  // multiply value with denomination\n  // 2456 * 1000000 -> 2456000000\n  const updatedValue = value * denomination;\n  // count number of zeros in denomination\n  const numberOfZerosInDenomination = denomination.toString().length - 1;\n  // check which either `fraction` or `denomination` have lower number of zeros\n  const decimals = Math.min(fraction.length, numberOfZerosInDenomination);\n  if (decimals === 0) {\n    return updatedValue.toString();\n  }\n  // Add zeros to make length equal to required decimal points\n  // If string is larger than decimal points required then remove last zeros\n  return updatedValue.toString().padStart(decimals, '0').slice(0, -decimals);\n};\nexports.toWei = toWei;\n/**\n * Will convert an upper or lowercase Ethereum address to a checksum address.\n * @param address - An address string\n * @returns\tThe checksum address\n * @example\n * ```ts\n * web3.utils.toChecksumAddress('0xc1912fee45d61c87cc5ea59dae31190fffff232d');\n * > \"0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d\"\n * ```\n */\nconst toChecksumAddress = address => {\n  if (!(0, web3_validator_1.isAddress)(address, false)) {\n    throw new web3_errors_1.InvalidAddressError(address);\n  }\n  const lowerCaseAddress = address.toLowerCase().replace(/^0x/i, '');\n  const hash = (0, exports.bytesToHex)((0, keccak_js_1.keccak256)((0, utils_js_1.utf8ToBytes)(lowerCaseAddress)));\n  if ((0, web3_validator_1.isNullish)(hash) || hash === '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470') return ''; // // EIP-1052 if hash is equal to c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470, keccak was given empty data\n  let checksumAddress = '0x';\n  const addressHash = hash.replace(/^0x/i, '');\n  for (let i = 0; i < lowerCaseAddress.length; i += 1) {\n    // If ith character is 8 to f then make it uppercase\n    if (parseInt(addressHash[i], 16) > 7) {\n      checksumAddress += lowerCaseAddress[i].toUpperCase();\n    } else {\n      checksumAddress += lowerCaseAddress[i];\n    }\n  }\n  return checksumAddress;\n};\nexports.toChecksumAddress = toChecksumAddress;","map":{"version":3,"names":["keccak_js_1","require","utils_js_1","web3_validator_1","web3_errors_1","base","BigInt","expo10","expo","exports","ethUnitMap","noether","wei","kwei","Kwei","babbage","femtoether","mwei","Mwei","lovelace","picoether","gwei","Gwei","shannon","nanoether","nano","szabo","microether","micro","finney","milliether","milli","ether","kether","grand","mether","gether","tether","bytesToUint8Array","data","validator","validate","Uint8Array","Array","isArray","utils","hexToUint8Array","InvalidBytesError","uint8ArrayToHexString","bytesToHex","bytes","hexToBytes","slice","toLowerCase","hexToNumber","value","toDecimal","numberToHex","hexstrict","updatedValue","startsWith","length","concat","fromDecimal","hexToNumberString","toString","utf8ToHex","str","strWithoutNullCharacter","replace","TextEncoder","encode","fromUtf8","stringToHex","hexToUtf8","bytesToUtf8","toUtf8","input","hexToString","asciiToHex","hexString","i","hexCharCode","charCodeAt","fromAscii","hexToAscii","decoder","TextDecoder","decode","toAscii","toHex","returnType","isAddress","JSON","stringify","isHexStrict","isHex","isInt","Number","isFinite","HexProcessingError","toNumber","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","_a","InvalidNumberError","toBigInt","fromWei","number","unit","denomination","InvalidUnitError","String","numberOfZerosInDenomination","zeroPaddedValue","padStart","integer","fraction","toWei","split","decimals","Math","min","toChecksumAddress","address","InvalidAddressError","lowerCaseAddress","hash","keccak256","utf8ToBytes","isNullish","checksumAddress","addressHash","parseInt","toUpperCase"],"sources":["/Users/branko/Documents/Web3_FE_task/node_modules/web3-utils/src/converters.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { bytesToUtf8, utf8ToBytes } from 'ethereum-cryptography/utils.js';\nimport { Address, Bytes, HexString, Numbers, ValueTypes } from 'web3-types';\nimport {\n\tisAddress,\n\tisHex,\n\tisHexStrict,\n\tisNullish,\n\tisInt,\n\tutils as validatorUtils,\n\tvalidator,\n} from 'web3-validator';\n\nimport {\n\tHexProcessingError,\n\tInvalidAddressError,\n\tInvalidBytesError,\n\tInvalidNumberError,\n\tInvalidUnitError,\n} from 'web3-errors';\n\nconst base = BigInt(10);\nconst expo10 = (expo: number) => base ** BigInt(expo);\n\n// Ref: https://ethdocs.org/en/latest/ether.html\n/** @internal */\nexport const ethUnitMap = {\n\tnoether: BigInt('0'),\n\twei: BigInt(1),\n\tkwei: expo10(3),\n\tKwei: expo10(3),\n\tbabbage: expo10(3),\n\tfemtoether: expo10(3),\n\tmwei: expo10(6),\n\tMwei: expo10(6),\n\tlovelace: expo10(6),\n\tpicoether: expo10(6),\n\tgwei: expo10(9),\n\tGwei: expo10(9),\n\tshannon: expo10(9),\n\tnanoether: expo10(9),\n\tnano: expo10(9),\n\tszabo: expo10(12),\n\tmicroether: expo10(12),\n\tmicro: expo10(12),\n\tfinney: expo10(15),\n\tmilliether: expo10(15),\n\tmilli: expo10(15),\n\tether: expo10(18),\n\tkether: expo10(21),\n\tgrand: expo10(21),\n\tmether: expo10(24),\n\tgether: expo10(27),\n\ttether: expo10(30),\n};\n\nexport type EtherUnits = keyof typeof ethUnitMap;\n/**\n * Convert a value from bytes to Uint8Array\n * @param data - Data to be converted\n * @returns - The Uint8Array representation of the input data\n *\n * @example\n * ```ts\n * console.log(web3.utils.bytesToUint8Array(\"0xab\")));\n * > Uint8Array(1) [ 171 ]\n * ```\n */\nexport const bytesToUint8Array = (data: Bytes): Uint8Array | never => {\n\tvalidator.validate(['bytes'], [data]);\n\n\tif (data instanceof Uint8Array) {\n\t\treturn data;\n\t}\n\n\tif (Array.isArray(data)) {\n\t\treturn new Uint8Array(data);\n\t}\n\n\tif (typeof data === 'string') {\n\t\treturn validatorUtils.hexToUint8Array(data);\n\t}\n\n\tthrow new InvalidBytesError(data);\n};\n\n/**\n * @internal\n */\nconst { uint8ArrayToHexString } = validatorUtils;\n\n/**\n * Convert a byte array to a hex string\n * @param bytes - Byte array to be converted\n * @returns - The hex string representation of the input byte array\n *\n * @example\n * ```ts\n * console.log(web3.utils.bytesToHex(new Uint8Array([72, 12])));\n * > \"0x480c\"\n *\n */\nexport const bytesToHex = (bytes: Bytes): HexString =>\n\tuint8ArrayToHexString(bytesToUint8Array(bytes));\n\n/**\n * Convert a hex string to a byte array\n * @param hex - Hex string to be converted\n * @returns - The byte array representation of the input hex string\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToBytes('0x74657374'));\n * > Uint8Array(4) [ 116, 101, 115, 116 ]\n * ```\n */\nexport const hexToBytes = (bytes: HexString): Uint8Array => {\n\tif (typeof bytes === 'string' && bytes.slice(0, 2).toLowerCase() !== '0x') {\n\t\treturn bytesToUint8Array(`0x${bytes}`);\n\t}\n\treturn bytesToUint8Array(bytes);\n};\n\n/**\n * Converts value to it's number representation\n * @param value - Hex string to be converted\n * @returns - The number representation of the input value\n *\n * @example\n * ```ts\n * conoslle.log(web3.utils.hexToNumber('0xa'));\n * > 10\n * ```\n */\nexport const hexToNumber = (value: HexString): bigint | number => {\n\tvalidator.validate(['hex'], [value]);\n\n\t// To avoid duplicate code and circular dependency we will\n\t// use `hexToNumber` implementation from `web3-validator`\n\treturn validatorUtils.hexToNumber(value);\n};\n\n/**\n * Converts value to it's number representation @alias `hexToNumber`\n */\nexport const toDecimal = hexToNumber;\n\n/**\n * Converts value to it's hex representation\n * @param value - Value to be converted\n * @param hexstrict - Add padding to converted value if odd, to make it hexstrict\n * @returns - The hex representation of the input value\n *\n * @example\n * ```ts\n * console.log(web3.utils.numberToHex(10));\n * > \"0xa\"\n * ```\n */\nexport const numberToHex = (value: Numbers, hexstrict?: boolean): HexString => {\n\tif (typeof value !== 'bigint') validator.validate(['int'], [value]);\n\t// To avoid duplicate code and circular dependency we will\n\t// use `numberToHex` implementation from `web3-validator`\n\tlet updatedValue = validatorUtils.numberToHex(value);\n\tif (hexstrict) {\n\t\tif (!updatedValue.startsWith('-') && updatedValue.length % 2 === 1) {\n\t\t\t// To avoid duplicate a circular dependancy we will not be using the padLeft method\n\t\t\tupdatedValue = '0x0'.concat(updatedValue.slice(2));\n\t\t} else if (updatedValue.length % 2 === 0 && updatedValue.startsWith('-'))\n\t\t\tupdatedValue = '-0x0'.concat(updatedValue.slice(3));\n\t}\n\treturn updatedValue;\n};\n/**\n * Converts value to it's hex representation @alias `numberToHex`\n *\n */\nexport const fromDecimal = numberToHex;\n\n/**\n * Converts value to it's decimal representation in string\n * @param value - Hex string to be converted\n * @returns - The decimal representation of the input value\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToNumberString('0xa'));\n * > \"10\"\n * ```\n */\nexport const hexToNumberString = (data: HexString): string => hexToNumber(data).toString();\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n * @param str - Utf8 string to be converted\n * @returns - The hex representation of the input string\n *\n * @example\n * ```ts\n * console.log(utf8ToHex('web3.js'));\n * > \"0x776562332e6a73\"\n *\n */\nexport const utf8ToHex = (str: string): HexString => {\n\tvalidator.validate(['string'], [str]);\n\n\t// To be compatible with 1.x trim null character\n\t// eslint-disable-next-line no-control-regex\n\tlet strWithoutNullCharacter = str.replace(/^(?:\\u0000)/, '');\n\t// eslint-disable-next-line no-control-regex\n\tstrWithoutNullCharacter = strWithoutNullCharacter.replace(/(?:\\u0000)$/, '');\n\n\treturn bytesToHex(new TextEncoder().encode(strWithoutNullCharacter));\n};\n\n/**\n * @alias utf8ToHex\n */\n\nexport const fromUtf8 = utf8ToHex;\n/**\n * @alias utf8ToHex\n */\nexport const stringToHex = utf8ToHex;\n\n/**\n * Should be called to get utf8 from it's hex representation\n * @param str - Hex string to be converted\n * @returns - Utf8 string\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToUtf8('0x48656c6c6f20576f726c64'));\n * > Hello World\n * ```\n */\nexport const hexToUtf8 = (str: HexString): string => bytesToUtf8(hexToBytes(str));\n\n/**\n * @alias hexToUtf8\n */\nexport const toUtf8 = (input: HexString | Uint8Array) => {\n\tif (typeof input === 'string') {\n\t\treturn hexToUtf8(input);\n\t}\n\tvalidator.validate(['bytes'], [input]);\n\treturn bytesToUtf8(input);\n};\n\n/**\n * @alias hexToUtf8\n */\nexport const hexToString = hexToUtf8;\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n * @param str - String to be converted to hex\n * @returns - Hex string\n *\n * @example\n * ```ts\n * console.log(web3.utils.asciiToHex('Hello World'));\n * > 0x48656c6c6f20576f726c64\n * ```\n */\nexport const asciiToHex = (str: string): HexString => {\n\tvalidator.validate(['string'], [str]);\n\tlet hexString = '';\n\tfor (let i = 0; i < str.length; i += 1) {\n\t\tconst hexCharCode = str.charCodeAt(i).toString(16);\n\t\t// might need a leading 0\n\t\thexString += hexCharCode.length % 2 !== 0 ? `0${hexCharCode}` : hexCharCode;\n\t}\n\treturn `0x${hexString}`;\n};\n\n/**\n * @alias asciiToHex\n */\nexport const fromAscii = asciiToHex;\n\n/**\n * Should be called to get ascii from it's hex representation\n * @param str - Hex string to be converted to ascii\n * @returns - Ascii string\n *\n * @example\n * ```ts\n * console.log(web3.utils.hexToAscii('0x48656c6c6f20576f726c64'));\n * > Hello World\n * ```\n */\nexport const hexToAscii = (str: HexString): string => {\n\tconst decoder = new TextDecoder('ascii');\n\treturn decoder.decode(hexToBytes(str));\n};\n\n/**\n * @alias hexToAscii\n */\nexport const toAscii = hexToAscii;\n\n/**\n * Auto converts any given value into it's hex representation.\n * @param value - Value to be converted to hex\n * @param returnType - If true, it will return the type of the value\n *\n * @example\n * ```ts\n * console.log(web3.utils.toHex(10));\n * > 0xa\n *\n * console.log(web3.utils.toHex('0x123', true));\n * > bytes\n *```\n */\nexport const toHex = (\n\tvalue: Numbers | Bytes | Address | boolean | object,\n\treturnType?: boolean,\n): HexString | ValueTypes => {\n\tif (typeof value === 'string' && isAddress(value)) {\n\t\treturn returnType ? 'address' : `0x${value.toLowerCase().replace(/^0x/i, '')}`;\n\t}\n\n\tif (typeof value === 'boolean') {\n\t\t// eslint-disable-next-line no-nested-ternary\n\t\treturn returnType ? 'bool' : value ? '0x01' : '0x00';\n\t}\n\n\tif (typeof value === 'number') {\n\t\t// eslint-disable-next-line no-nested-ternary\n\t\treturn returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\n\t}\n\n\tif (typeof value === 'bigint') {\n\t\treturn returnType ? 'bigint' : numberToHex(value);\n\t}\n\n\tif (typeof value === 'object' && !!value) {\n\t\treturn returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n\t}\n\n\tif (typeof value === 'string') {\n\t\tif (value.startsWith('-0x') || value.startsWith('-0X')) {\n\t\t\treturn returnType ? 'int256' : numberToHex(value);\n\t\t}\n\n\t\tif (isHexStrict(value)) {\n\t\t\treturn returnType ? 'bytes' : value;\n\t\t}\n\t\tif (isHex(value) && !isInt(value)) {\n\t\t\treturn returnType ? 'bytes' : `0x${value}`;\n\t\t}\n\n\t\tif (!Number.isFinite(value)) {\n\t\t\treturn returnType ? 'string' : utf8ToHex(value);\n\t\t}\n\t}\n\n\tthrow new HexProcessingError(value);\n};\n\n/**\n * Converts any given value into it's number representation, if possible, else into it's bigint representation.\n * @param value - The value to convert\n * @returns - Returns the value in number or bigint representation\n *\n * @example\n * ```ts\n * console.log(web3.utils.toNumber(1));\n * > 1\n * console.log(web3.utils.toNumber(Number.MAX_SAFE_INTEGER));\n * > 9007199254740991\n *\n * console.log(web3.utils.toNumber(BigInt(Number.MAX_SAFE_INTEGER)));\n * > 9007199254740991\n *\n * console.log(web3.utils.toNumber(BigInt(Number.MAX_SAFE_INTEGER) + BigInt(1)));\n * > 9007199254740992n\n *\n * ```\n */\nexport const toNumber = (value: Numbers): number | bigint => {\n\tif (typeof value === 'number') {\n\t\treturn value;\n\t}\n\n\tif (typeof value === 'bigint') {\n\t\treturn value >= Number.MIN_SAFE_INTEGER && value <= Number.MAX_SAFE_INTEGER\n\t\t\t? Number(value)\n\t\t\t: value;\n\t}\n\n\tif (typeof value === 'string' && isHexStrict(value)) {\n\t\treturn hexToNumber(value);\n\t}\n\n\ttry {\n\t\treturn toNumber(BigInt(value));\n\t} catch {\n\t\tthrow new InvalidNumberError(value);\n\t}\n};\n\n/**\n * Auto converts any given value into it's bigint representation\n *\n * @param value - The value to convert\n * @returns - Returns the value in bigint representation\n\n * @example\n * ```ts\n * console.log(web3.utils.toBigInt(1));\n * > 1n\n * ```\n */\nexport const toBigInt = (value: unknown): bigint => {\n\tif (typeof value === 'number') {\n\t\treturn BigInt(value);\n\t}\n\n\tif (typeof value === 'bigint') {\n\t\treturn value;\n\t}\n\n\t// isHex passes for dec, too\n\tif (typeof value === 'string' && isHex(value)) {\n\t\treturn BigInt(value);\n\t}\n\n\tthrow new InvalidNumberError(value);\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n * @param number - The value in wei\n * @param unit - The unit to convert to\n * @returns - Returns the converted value in the given unit\n *\n * @example\n * ```ts\n * console.log(web3.utils.fromWei(\"1\", \"ether\"));\n * > 0.000000000000000001\n *\n * console.log(web3.utils.fromWei(\"1\", \"shannon\"));\n * > 0.000000001\n * ```\n */\nexport const fromWei = (number: Numbers, unit: EtherUnits): string => {\n\tconst denomination = ethUnitMap[unit];\n\n\tif (!denomination) {\n\t\tthrow new InvalidUnitError(unit);\n\t}\n\n\t// value in wei would always be integer\n\t// 13456789, 1234\n\tconst value = String(toNumber(number));\n\n\t// count number of zeros in denomination\n\t// 1000000 -> 6\n\tconst numberOfZerosInDenomination = denomination.toString().length - 1;\n\n\tif (numberOfZerosInDenomination <= 0) {\n\t\treturn value.toString();\n\t}\n\n\t// pad the value with required zeros\n\t// 13456789 -> 13456789, 1234 -> 001234\n\tconst zeroPaddedValue = value.padStart(numberOfZerosInDenomination, '0');\n\n\t// get the integer part of value by counting number of zeros from start\n\t// 13456789 -> '13'\n\t// 001234 -> ''\n\tconst integer = zeroPaddedValue.slice(0, -numberOfZerosInDenomination);\n\n\t// get the fraction part of value by counting number of zeros backward\n\t// 13456789 -> '456789'\n\t// 001234 -> '001234'\n\tconst fraction = zeroPaddedValue.slice(-numberOfZerosInDenomination).replace(/\\.?0+$/, '');\n\n\tif (integer === '') {\n\t\treturn `0.${fraction}`;\n\t}\n\n\tif (fraction === '') {\n\t\treturn integer;\n\t}\n\n\treturn `${integer}.${fraction}`;\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * @param number - The number to convert.\n * @param unit - {@link EtherUnits} The unit of the number passed.\n * @returns The number converted to wei.\n *\n * @example\n * ```ts\n * console.log(web3.utils.toWei(\"0.001\", \"ether\"));\n * > 1000000000000000 //(wei)\n * ```\n */\n// todo in 1.x unit defaults to 'ether'\nexport const toWei = (number: Numbers, unit: EtherUnits): string => {\n\tvalidator.validate(['number'], [number]);\n\n\tconst denomination = ethUnitMap[unit];\n\n\tif (!denomination) {\n\t\tthrow new InvalidUnitError(unit);\n\t}\n\n\t// if value is decimal e.g. 24.56 extract `integer` and `fraction` part\n\t// to avoid `fraction` to be null use `concat` with empty string\n\tconst [integer, fraction] = String(\n\t\ttypeof number === 'string' && !isHexStrict(number) ? number : toNumber(number),\n\t)\n\t\t.split('.')\n\t\t.concat('');\n\n\t// join the value removing `.` from\n\t// 24.56 -> 2456\n\tconst value = BigInt(`${integer}${fraction}`);\n\n\t// multiply value with denomination\n\t// 2456 * 1000000 -> 2456000000\n\tconst updatedValue = value * denomination;\n\n\t// count number of zeros in denomination\n\tconst numberOfZerosInDenomination = denomination.toString().length - 1;\n\n\t// check which either `fraction` or `denomination` have lower number of zeros\n\tconst decimals = Math.min(fraction.length, numberOfZerosInDenomination);\n\n\tif (decimals === 0) {\n\t\treturn updatedValue.toString();\n\t}\n\n\t// Add zeros to make length equal to required decimal points\n\t// If string is larger than decimal points required then remove last zeros\n\treturn updatedValue.toString().padStart(decimals, '0').slice(0, -decimals);\n};\n\n/**\n * Will convert an upper or lowercase Ethereum address to a checksum address.\n * @param address - An address string\n * @returns\tThe checksum address\n * @example\n * ```ts\n * web3.utils.toChecksumAddress('0xc1912fee45d61c87cc5ea59dae31190fffff232d');\n * > \"0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d\"\n * ```\n */\nexport const toChecksumAddress = (address: Address): string => {\n\tif (!isAddress(address, false)) {\n\t\tthrow new InvalidAddressError(address);\n\t}\n\n\tconst lowerCaseAddress = address.toLowerCase().replace(/^0x/i, '');\n\n\tconst hash = bytesToHex(keccak256(utf8ToBytes(lowerCaseAddress)));\n\n\tif (\n\t\tisNullish(hash) ||\n\t\thash === '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n\t)\n\t\treturn ''; // // EIP-1052 if hash is equal to c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470, keccak was given empty data\n\n\tlet checksumAddress = '0x';\n\n\tconst addressHash = hash.replace(/^0x/i, '');\n\n\tfor (let i = 0; i < lowerCaseAddress.length; i += 1) {\n\t\t// If ith character is 8 to f then make it uppercase\n\t\tif (parseInt(addressHash[i], 16) > 7) {\n\t\t\tchecksumAddress += lowerCaseAddress[i].toUpperCase();\n\t\t} else {\n\t\t\tchecksumAddress += lowerCaseAddress[i];\n\t\t}\n\t}\n\treturn checksumAddress;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}