{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { isNullish } from 'web3-validator';\nimport { TransactionDataAndInputError } from 'web3-errors';\nimport { mergeDeep, bytesToHex, format } from 'web3-utils';\nimport { transactionSchema } from '../schemas.js';\nexport function formatTransaction(transaction, returnFormat = DEFAULT_RETURN_FORMAT, options = {\n  transactionSchema\n}) {\n  var _a;\n  let formattedTransaction = mergeDeep({}, transaction);\n  if (!isNullish(transaction === null || transaction === void 0 ? void 0 : transaction.common)) {\n    formattedTransaction.common = Object.assign({}, transaction.common);\n    if (!isNullish((_a = transaction.common) === null || _a === void 0 ? void 0 : _a.customChain)) formattedTransaction.common.customChain = Object.assign({}, transaction.common.customChain);\n  }\n  formattedTransaction = format(options.transactionSchema, formattedTransaction, returnFormat);\n  if (!isNullish(formattedTransaction.data)) {\n    if (!isNullish(formattedTransaction.input) && formattedTransaction.data !== formattedTransaction.input) throw new TransactionDataAndInputError({\n      data: bytesToHex(formattedTransaction.data),\n      input: bytesToHex(formattedTransaction.input)\n    });\n    formattedTransaction.input = formattedTransaction.data;\n  } else if (!isNullish(formattedTransaction.input)) {\n    formattedTransaction.data = formattedTransaction.input;\n  }\n  if (!isNullish(formattedTransaction.gasLimit)) {\n    formattedTransaction.gas = formattedTransaction.gasLimit;\n    delete formattedTransaction.gasLimit;\n  }\n  return formattedTransaction;\n}","map":{"version":3,"names":["DEFAULT_RETURN_FORMAT","isNullish","TransactionDataAndInputError","mergeDeep","bytesToHex","format","transactionSchema","formatTransaction","transaction","returnFormat","options","formattedTransaction","common","Object","assign","_a","customChain","data","input","gasLimit","gas"],"sources":["/Users/branko/Documents/Web3_FE_task/node_modules/web3-eth/src/utils/format_transaction.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Transaction, DataFormat, DEFAULT_RETURN_FORMAT, FormatType } from 'web3-types';\nimport { isNullish, ValidationSchemaInput } from 'web3-validator';\nimport { TransactionDataAndInputError } from 'web3-errors';\nimport { mergeDeep, bytesToHex, format } from 'web3-utils';\nimport { transactionSchema } from '../schemas.js';\n\nexport function formatTransaction<\n\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\tTransactionType extends Transaction = Transaction,\n>(\n\ttransaction: TransactionType,\n\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\toptions: { transactionSchema: ValidationSchemaInput | typeof transactionSchema } = {\n\t\ttransactionSchema,\n\t},\n): FormatType<TransactionType, ReturnFormat> {\n\tlet formattedTransaction = mergeDeep({}, transaction as Record<string, unknown>) as Transaction;\n\tif (!isNullish(transaction?.common)) {\n\t\tformattedTransaction.common = { ...transaction.common };\n\t\tif (!isNullish(transaction.common?.customChain))\n\t\t\tformattedTransaction.common.customChain = { ...transaction.common.customChain };\n\t}\n\n\tformattedTransaction = format(options.transactionSchema, formattedTransaction, returnFormat);\n\n\tif (!isNullish(formattedTransaction.data)) {\n\t\tif (\n\t\t\t!isNullish(formattedTransaction.input) &&\n\t\t\tformattedTransaction.data !== formattedTransaction.input\n\t\t)\n\t\t\tthrow new TransactionDataAndInputError({\n\t\t\t\tdata: bytesToHex(formattedTransaction.data),\n\t\t\t\tinput: bytesToHex(formattedTransaction.input),\n\t\t\t});\n\n\t\tformattedTransaction.input = formattedTransaction.data;\n\t} else if (!isNullish(formattedTransaction.input)) {\n\t\tformattedTransaction.data = formattedTransaction.input;\n\t}\n\n\tif (!isNullish(formattedTransaction.gasLimit)) {\n\t\tformattedTransaction.gas = formattedTransaction.gasLimit;\n\t\tdelete formattedTransaction.gasLimit;\n\t}\n\n\treturn formattedTransaction as FormatType<TransactionType, ReturnFormat>;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,qBAAqB,QAAoB,YAAY;AACvF,SAASC,SAAS,QAA+B,gBAAgB;AACjE,SAASC,4BAA4B,QAAQ,aAAa;AAC1D,SAASC,SAAS,EAAEC,UAAU,EAAEC,MAAM,QAAQ,YAAY;AAC1D,SAASC,iBAAiB,QAAQ,eAAe;AAEjD,OAAM,SAAUC,iBAAiBA,CAIhCC,WAA4B,EAC5BC,YAAA,GAA6BT,qBAAqC,EAClEU,OAAA,GAAmF;EAClFJ;CACA;;EAED,IAAIK,oBAAoB,GAAGR,SAAS,CAAC,EAAE,EAAEK,WAAsC,CAAgB;EAC/F,IAAI,CAACP,SAAS,CAACO,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEI,MAAM,CAAC,EAAE;IACpCD,oBAAoB,CAACC,MAAM,GAAAC,MAAA,CAAAC,MAAA,KAAQN,WAAW,CAACI,MAAM,CAAE;IACvD,IAAI,CAACX,SAAS,CAAC,CAAAc,EAAA,GAAAP,WAAW,CAACI,MAAM,cAAAG,EAAA,uBAAAA,EAAA,CAAEC,WAAW,CAAC,EAC9CL,oBAAoB,CAACC,MAAM,CAACI,WAAW,GAAAH,MAAA,CAAAC,MAAA,KAAQN,WAAW,CAACI,MAAM,CAACI,WAAW,CAAE;;EAGjFL,oBAAoB,GAAGN,MAAM,CAACK,OAAO,CAACJ,iBAAiB,EAAEK,oBAAoB,EAAEF,YAAY,CAAC;EAE5F,IAAI,CAACR,SAAS,CAACU,oBAAoB,CAACM,IAAI,CAAC,EAAE;IAC1C,IACC,CAAChB,SAAS,CAACU,oBAAoB,CAACO,KAAK,CAAC,IACtCP,oBAAoB,CAACM,IAAI,KAAKN,oBAAoB,CAACO,KAAK,EAExD,MAAM,IAAIhB,4BAA4B,CAAC;MACtCe,IAAI,EAAEb,UAAU,CAACO,oBAAoB,CAACM,IAAI,CAAC;MAC3CC,KAAK,EAAEd,UAAU,CAACO,oBAAoB,CAACO,KAAK;KAC5C,CAAC;IAEHP,oBAAoB,CAACO,KAAK,GAAGP,oBAAoB,CAACM,IAAI;GACtD,MAAM,IAAI,CAAChB,SAAS,CAACU,oBAAoB,CAACO,KAAK,CAAC,EAAE;IAClDP,oBAAoB,CAACM,IAAI,GAAGN,oBAAoB,CAACO,KAAK;;EAGvD,IAAI,CAACjB,SAAS,CAACU,oBAAoB,CAACQ,QAAQ,CAAC,EAAE;IAC9CR,oBAAoB,CAACS,GAAG,GAAGT,oBAAoB,CAACQ,QAAQ;IACxD,OAAOR,oBAAoB,CAACQ,QAAQ;;EAGrC,OAAOR,oBAAiE;AACzE"},"metadata":{},"sourceType":"module","externalDependencies":[]}